[
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex01/Take-Home_Ex01.html",
    "href": "Take-Home_Ex/Take-Home_Ex01/Take-Home_Ex01.html",
    "title": "Take-Home Exercise 1",
    "section": "",
    "text": "Water is an essential resource for people. The health of people depends on having access to clean water. It ensures peace and security, a clean environment, a sustainable economy, and a reduction in poverty. Yet more than 40% of the world’s population lacks access to enough clean water. According to UN-Water, 1.8 billion people will be residing in nations or areas with a severe water shortage by 2025. Water scarcity is a serious threat to several sectors, including food security. Around 70% of the world’s freshwater resources are used for agriculture.\n\n\n\nDiscover the geographical distribution of functional and non-function water points and their co-locations if any in Osun State, Nigeria.\nExploratory Spatial Data Analysis (ESDA)\n\nDerive kernel density maps of functional and non-functional water points. Using appropriate tmap functions\nDisplay the kernel density maps on openstreetmap of Osub State, Nigeria.\nDescribe the spatial patterns revealed by the kernel density maps. Highlight the advantage of kernel density map over point map.\n\nSecond-order Spatial Point Patterns Analysis\nWith reference to the spatial point patterns observed in ESDA:\n\nFormulate the null hypothesis and alternative hypothesis and select the confidence level.\nPerform the test by using appropriate Second order spatial point patterns analysis technique.\nWith reference to the analysis results, draw statistical conclusions.\n\nSpatial Correlation Analysis\n\nInvestigate if the spatial distribution of functional and non-functional water points are independent from each other.\nFormulate the null hypothesis and alternative hypothesis and select the confidence level.\nPerform the test by using appropriate Second order spatial point patterns analysis technique. With reference to the analysis results, draw statistical conclusions.\n\n\n\n\n\nTable 1: Data used\n\n\n\n\n\n\n\n\n\nType\nName\nFormat\nDescription\nSource\n\n\n\n\nAspatial\nWPdx+\ncsv\nLocations of water points\nWPdx Global Data Repositories\n\n\nGeospatial\ngeoBoundaries\nSHP\ngeoBoundaries data of Nigeria\ngeoBoundaries"
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex01/Take-Home_Ex01.html#data-geospatial",
    "href": "Take-Home_Ex/Take-Home_Ex01/Take-Home_Ex01.html#data-geospatial",
    "title": "Take-Home Exercise 1",
    "section": "3.1 Data Geospatial",
    "text": "3.1 Data Geospatial\n\n1. Import NGA2. Select & Filter specific fields3. Glimpse NGA\n\n\nWe will be using st_read function to read our geospatial data.\n\nNGA <- st_read(dsn = \"data/geospatial/\", \n               layer = \"nga_admbnda_adm2_osgof_20190417\")%>%\n  \nst_transform(crs = 26392)\n\nReading layer `nga_admbnda_adm2_osgof_20190417' from data source \n  `C:\\kt-x\\is415-GAA\\Take-Home_Ex\\Take-Home_Ex01\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 774 features and 16 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2.668534 ymin: 4.273007 xmax: 14.67882 ymax: 13.89442\nGeodetic CRS:  WGS 84\n\n\n\n\nLets start by selecting specific fields that will be helpful in this exercise and select Osun state using the filter() function.\n\nNGA <- NGA %>%\n  select(c(3:4, 8:9)) %>%\n  filter(ADM1_EN == \"Osun\")\n\n\n\n\nglimpse(NGA)\n\nRows: 30\nColumns: 5\n$ ADM2_EN    <chr> \"Aiyedade\", \"Aiyedire\", \"Atakumosa East\", \"Atakumosa West\",…\n$ ADM2_PCODE <chr> \"NG030001\", \"NG030002\", \"NG030003\", \"NG030004\", \"NG030005\",…\n$ ADM1_EN    <chr> \"Osun\", \"Osun\", \"Osun\", \"Osun\", \"Osun\", \"Osun\", \"Osun\", \"Os…\n$ ADM1_PCODE <chr> \"NG030\", \"NG030\", \"NG030\", \"NG030\", \"NG030\", \"NG030\", \"NG03…\n$ geometry   <MULTIPOLYGON [m]> MULTIPOLYGON (((213526.6 34..., MULTIPOLYGON (…"
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex01/Take-Home_Ex01.html#importing-wpdx",
    "href": "Take-Home_Ex/Take-Home_Ex01/Take-Home_Ex01.html#importing-wpdx",
    "title": "Take-Home Exercise 1",
    "section": "3.2 Importing WPdx",
    "text": "3.2 Importing WPdx\nWe will be using read_csv() function to read the WPdx file and using filter function to only show Nigeria country data and only for Osun state.\n\nwp_nga <- read_csv(\"data/aspatial/WPdx.csv\") %>%\n  filter(`#clean_country_name` == \"Nigeria\") %>%\n  filter(`#clean_adm1` == \"Osun\")\n\n\n3.2.1 Convert water point data into sf point features\n\nwp_nga$Geometry = st_as_sfc(wp_nga$`New Georeferenced Column`)\nwp_nga\n\n# A tibble: 5,557 × 71\n   row_id `#source`      #lat_…¹ #lon_…² #repo…³ #stat…⁴ #wate…⁵ #wate…⁶ #wate…⁷\n    <dbl> <chr>            <dbl>   <dbl> <chr>   <chr>   <chr>   <chr>   <chr>  \n 1 429123 GRID3             8.02    5.06 08/29/… Unknown <NA>    <NA>    Tapsta…\n 2  70566 Federal Minis…    7.32    4.79 05/11/… No      Protec… Well    Mechan…\n 3  70578 Federal Minis…    7.76    4.56 05/11/… No      Boreho… Well    Mechan…\n 4  66401 Federal Minis…    8.03    4.64 04/30/… No      Boreho… Well    Mechan…\n 5 422190 GRID3             7.87    4.88 08/29/… Unknown <NA>    <NA>    Tapsta…\n 6 422064 GRID3             7.7     4.89 08/29/… Unknown <NA>    <NA>    Tapsta…\n 7  65607 Federal Minis…    7.89    4.71 05/12/… No      Boreho… Well    Mechan…\n 8  68989 Federal Minis…    7.51    4.27 05/07/… No      Boreho… Well    <NA>   \n 9  67708 Federal Minis…    7.48    4.35 04/29/… Yes     Boreho… Well    Mechan…\n10  66419 Federal Minis…    7.63    4.50 05/08/… Yes     Boreho… Well    Hand P…\n# … with 5,547 more rows, 62 more variables: `#water_tech_category` <chr>,\n#   `#facility_type` <chr>, `#clean_country_name` <chr>, `#clean_adm1` <chr>,\n#   `#clean_adm2` <chr>, `#clean_adm3` <chr>, `#clean_adm4` <chr>,\n#   `#install_year` <dbl>, `#installer` <chr>, `#rehab_year` <lgl>,\n#   `#rehabilitator` <lgl>, `#management_clean` <chr>, `#status_clean` <chr>,\n#   `#pay` <chr>, `#fecal_coliform_presence` <chr>,\n#   `#fecal_coliform_value` <dbl>, `#subjective_quality` <chr>, …\n\n\n\n\n3.2.2 Convert this df into sf object\n\nwp_sf <- st_sf(wp_nga, crs=4326)\nwp_sf\n\nSimple feature collection with 5557 features and 70 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 4.032004 ymin: 7.060309 xmax: 5.06 ymax: 8.061898\nGeodetic CRS:  WGS 84\n# A tibble: 5,557 × 71\n   row_id `#source`      #lat_…¹ #lon_…² #repo…³ #stat…⁴ #wate…⁵ #wate…⁶ #wate…⁷\n *  <dbl> <chr>            <dbl>   <dbl> <chr>   <chr>   <chr>   <chr>   <chr>  \n 1 429123 GRID3             8.02    5.06 08/29/… Unknown <NA>    <NA>    Tapsta…\n 2  70566 Federal Minis…    7.32    4.79 05/11/… No      Protec… Well    Mechan…\n 3  70578 Federal Minis…    7.76    4.56 05/11/… No      Boreho… Well    Mechan…\n 4  66401 Federal Minis…    8.03    4.64 04/30/… No      Boreho… Well    Mechan…\n 5 422190 GRID3             7.87    4.88 08/29/… Unknown <NA>    <NA>    Tapsta…\n 6 422064 GRID3             7.7     4.89 08/29/… Unknown <NA>    <NA>    Tapsta…\n 7  65607 Federal Minis…    7.89    4.71 05/12/… No      Boreho… Well    Mechan…\n 8  68989 Federal Minis…    7.51    4.27 05/07/… No      Boreho… Well    <NA>   \n 9  67708 Federal Minis…    7.48    4.35 04/29/… Yes     Boreho… Well    Mechan…\n10  66419 Federal Minis…    7.63    4.50 05/08/… Yes     Boreho… Well    Hand P…\n# … with 5,547 more rows, 62 more variables: `#water_tech_category` <chr>,\n#   `#facility_type` <chr>, `#clean_country_name` <chr>, `#clean_adm1` <chr>,\n#   `#clean_adm2` <chr>, `#clean_adm3` <chr>, `#clean_adm4` <chr>,\n#   `#install_year` <dbl>, `#installer` <chr>, `#rehab_year` <lgl>,\n#   `#rehabilitator` <lgl>, `#management_clean` <chr>, `#status_clean` <chr>,\n#   `#pay` <chr>, `#fecal_coliform_presence` <chr>,\n#   `#fecal_coliform_value` <dbl>, `#subjective_quality` <chr>, …\n\n\n\n\n3.2.3 Transforming into Nigeria projected coordinate system\n\nwp_sf <- wp_sf %>%\n  st_transform(crs = 26392)\n\n\n\n3.2.4 EDA for Water Point Data\n\n1. Overview2. Rename to wp_sf_nga3. Functional wp4. Non-Functional wp5. Unknown wp\n\n\nNext, we want to first have a visual of the water point data by creating a frequency chart. (Reference to In-class exercise 2)\n\nfreq(data = wp_sf,\n     input = '#status_clean')\n\n\n\n\n                     #status_clean frequency percentage cumulative_perc\n1                       Functional      2319      41.73           41.73\n2                   Non-Functional      2008      36.13           77.86\n3                             <NA>       748      13.46           91.32\n4      Functional but needs repair       248       4.46           95.78\n5 Non-Functional due to dry season       151       2.72           98.50\n6        Functional but not in use        63       1.13           99.63\n7                        Abandoned        15       0.27           99.90\n8         Abandoned/Decommissioned         5       0.09          100.00\n\n\n\n\nSeems like there are several different categories of water points. With reference to Objectives, we will be focusing on Functional and Non-Functional while still taking into account of the unknown water points. But first, let’s rename this spatial frame.\n\nwp_sf_nga <- wp_sf %>% \n  rename(status_clean = '#status_clean') %>%\n  select(status_clean) %>%\n  mutate(status_clean = replace_na(\n    status_clean, \"unknown\"))\n\n\n\nAfter that, we filter and assign the wp_functional\n\nwp_functional <- wp_sf_nga %>%\n  filter(status_clean %in%\n           c(\"Functional\",\n             \"Functional but not in use\",\n             \"Functional but needs repair\"))\nfreq(data = wp_functional,\n     input = 'status_clean')\n\n\n\n\n                 status_clean frequency percentage cumulative_perc\n1                  Functional      2319      88.17           88.17\n2 Functional but needs repair       248       9.43           97.60\n3   Functional but not in use        63       2.40          100.00\n\n\n\n\nSames goes for the Non-Functional\n\nwp_nonfunctional <- wp_sf_nga %>%\n  filter(status_clean %in%\n           c(\"Abandoned/Decommissioned\",\n             \"Abandoned\",\n             \"Non-Functional due to dry season\",\n             \"Non-Functional\",\n             \"Non functional due to dry season\"))\nfreq(data = wp_nonfunctional,\n     input = 'status_clean')\n\n\n\n\n                      status_clean frequency percentage cumulative_perc\n1                   Non-Functional      2008      92.15           92.15\n2 Non-Functional due to dry season       151       6.93           99.08\n3                        Abandoned        15       0.69           99.77\n4         Abandoned/Decommissioned         5       0.23          100.00\n\n\n\n\nSames goes for the Unknown\n\nwp_unknown <- wp_sf_nga %>%\n  filter(status_clean == \"unknown\")\n\nfreq(data = wp_unknown,\n     input = 'status_clean')\n\n\n\n\n  status_clean frequency percentage cumulative_perc\n1      unknown       748        100             100\n\n\n\n\n\n\n\n3.2.5 Performing Point-in-Polygon Count\nNext, we want to find out the number of total, functional, nonfunctional and unknown water points in each LGA. First, it identifies the functional water points in each LGA by using st_intersects() of sf package. Next, length() is used to calculate the number of functional water points that fall inside each LGA.\n\nNGA_wp <- NGA %>% \n  mutate(`total_wp` = lengths(\n    st_intersects(NGA, wp_sf_nga))) %>%\n  mutate(`wp_functional` = lengths(\n    st_intersects(NGA, wp_functional))) %>%\n  mutate(`wp_nonfunctional` = lengths(\n    st_intersects(NGA, wp_nonfunctional))) %>%\n  mutate(`wp_unknown` = lengths(\n    st_intersects(NGA, wp_unknown)))"
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex01/Take-Home_Ex01.html#converting-sf-data-frames-to-sps-spatial-class",
    "href": "Take-Home_Ex/Take-Home_Ex01/Take-Home_Ex01.html#converting-sf-data-frames-to-sps-spatial-class",
    "title": "Take-Home Exercise 1",
    "section": "4.1 Converting sf data frames to sp’s Spatial* class",
    "text": "4.1 Converting sf data frames to sp’s Spatial* class\n\n1. Code2. wp_sc3. NGA_sc\n\n\nConvert to sp object/class using as_Spatial(). Take a look at the following 2 tabs (wp_sc, NGA_sc), notice the properties is “SpatialPolygonsDataFrame”.\n\nwp_sc_functional <- as_Spatial(wp_functional)\nwp_sc_nonfunctional <- as_Spatial(wp_nonfunctional)\nNGA_sc <- as_Spatial(NGA)\n\n\n\n\nwp_sc_functional\n\nclass       : SpatialPointsDataFrame \nfeatures    : 2630 \nextent      : 177285.9, 290751, 343128.1, 450859.7  (xmin, xmax, ymin, ymax)\ncrs         : +proj=tmerc +lat_0=4 +lon_0=8.5 +k=0.99975 +x_0=670553.98 +y_0=0 +a=6378249.145 +rf=293.465 +towgs84=-92,-93,122,0,0,0,0 +units=m +no_defs \nvariables   : 1\nnames       :              status_clean \nmin values  :                Functional \nmax values  : Functional but not in use \n\nwp_sc_nonfunctional\n\nclass       : SpatialPointsDataFrame \nfeatures    : 2179 \nextent      : 180539, 290616, 340054.1, 450780.1  (xmin, xmax, ymin, ymax)\ncrs         : +proj=tmerc +lat_0=4 +lon_0=8.5 +k=0.99975 +x_0=670553.98 +y_0=0 +a=6378249.145 +rf=293.465 +towgs84=-92,-93,122,0,0,0,0 +units=m +no_defs \nvariables   : 1\nnames       :                     status_clean \nmin values  :                        Abandoned \nmax values  : Non-Functional due to dry season \n\n\n\n\n\nNGA_sc\n\nclass       : SpatialPolygonsDataFrame \nfeatures    : 30 \nextent      : 176503.2, 291043.8, 331434.7, 454520.1  (xmin, xmax, ymin, ymax)\ncrs         : +proj=tmerc +lat_0=4 +lon_0=8.5 +k=0.99975 +x_0=670553.98 +y_0=0 +a=6378249.145 +rf=293.465 +towgs84=-92,-93,122,0,0,0,0 +units=m +no_defs \nvariables   : 4\nnames       :  ADM2_EN, ADM2_PCODE, ADM1_EN, ADM1_PCODE \nmin values  : Aiyedade,   NG030001,    Osun,      NG030 \nmax values  :   Osogbo,   NG030030,    Osun,      NG030"
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex01/Take-Home_Ex01.html#converting-the-spatial-class-into-generic-sp-format",
    "href": "Take-Home_Ex/Take-Home_Ex01/Take-Home_Ex01.html#converting-the-spatial-class-into-generic-sp-format",
    "title": "Take-Home Exercise 1",
    "section": "4.2 Converting the Spatial* class into generic sp format",
    "text": "4.2 Converting the Spatial* class into generic sp format\nWHY? Because spatstat requires the analytical data in ppp object form. There is no direct way to convert a Spatial* classes into ppp object. We need to convert the Spatial classes* into Spatial object first.\n\nCodewp_spnga_sp\n\n\nStarting with Converting the Spatial* classes into generic sp objects. Take a look at the following 2 tabs (wp_sc, NGA_sc), notice the properties is “SpatialPoints” and “SpatialPolygons” respectively.\n\n#wp_sp <- as(wp_sc, \"SpatialPoints\")\nwp_sp_functional <- as(wp_sc_functional, \"SpatialPoints\")\nwp_sp_nonfunctional <- as(wp_sc_nonfunctional, \"SpatialPoints\")\nnga_sp <- as(NGA_sc, \"SpatialPolygons\")\n\n\n\n\n#wp_sp\nwp_sp_functional\n\nclass       : SpatialPoints \nfeatures    : 2630 \nextent      : 177285.9, 290751, 343128.1, 450859.7  (xmin, xmax, ymin, ymax)\ncrs         : +proj=tmerc +lat_0=4 +lon_0=8.5 +k=0.99975 +x_0=670553.98 +y_0=0 +a=6378249.145 +rf=293.465 +towgs84=-92,-93,122,0,0,0,0 +units=m +no_defs \n\nwp_sp_nonfunctional\n\nclass       : SpatialPoints \nfeatures    : 2179 \nextent      : 180539, 290616, 340054.1, 450780.1  (xmin, xmax, ymin, ymax)\ncrs         : +proj=tmerc +lat_0=4 +lon_0=8.5 +k=0.99975 +x_0=670553.98 +y_0=0 +a=6378249.145 +rf=293.465 +towgs84=-92,-93,122,0,0,0,0 +units=m +no_defs \n\n\n\n\n\nnga_sp\n\nclass       : SpatialPolygons \nfeatures    : 30 \nextent      : 176503.2, 291043.8, 331434.7, 454520.1  (xmin, xmax, ymin, ymax)\ncrs         : +proj=tmerc +lat_0=4 +lon_0=8.5 +k=0.99975 +x_0=670553.98 +y_0=0 +a=6378249.145 +rf=293.465 +towgs84=-92,-93,122,0,0,0,0 +units=m +no_defs"
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex01/Take-Home_Ex01.html#converting-the-generic-sp-format-into-spatstats-ppp-format",
    "href": "Take-Home_Ex/Take-Home_Ex01/Take-Home_Ex01.html#converting-the-generic-sp-format-into-spatstats-ppp-format",
    "title": "Take-Home Exercise 1",
    "section": "4.3 Converting the generic sp format into spatstat’s ppp format",
    "text": "4.3 Converting the generic sp format into spatstat’s ppp format\nNext, we will use as.ppp() function of spatstat to convert the spatial data into spatstat’s ppp object format.\n\nCodePlot\n\n\n\n#wp_ppp <- as(wp_sp, \"ppp\")\nwp_ppp_functional <- as(wp_sp_functional, \"ppp\")\nwp_ppp_nonfunctional <- as(wp_sp_nonfunctional, \"ppp\")\n\n#wp_ppp\nwp_ppp_functional\n\nPlanar point pattern: 2630 points\nwindow: rectangle = [177285.9, 290750.96] x [343128.1, 450859.7] units\n\nwp_ppp_nonfunctional\n\nPlanar point pattern: 2179 points\nwindow: rectangle = [180538.96, 290616] x [340054.1, 450780.1] units\n\n\n\n\n\n#plot(wp_ppp)\n\npar(mfrow=c(1,2))\nplot(wp_ppp_functional)\nplot(wp_ppp_nonfunctional)\n\n\n\n\n\n\n\n\n4.3.1 Check for duplicates\n\nT / F valueSum of duplicatesJittery Approach\n\n\n\n#any(duplicated(wp_ppp))\n\nany(duplicated(wp_ppp_functional))\n\n[1] FALSE\n\nany(duplicated(wp_ppp_nonfunctional))\n\n[1] FALSE\n\n\n\n\nIf so, check for the number of duplicates\n\nsum(multiplicity(wp_ppp_functional) > 1)\n\n[1] 0\n\nsum(multiplicity(wp_ppp_nonfunctional) > 1)\n\n[1] 0\n\n\n\n\nTo resolve this problem, we will be using the jittering approach, which will add a small perturbation to the duplicate points so that they do not occupy the exact same space.\n\n#wp_ppp_jit <- rjitter(wp_ppp, \n#                      retry=TRUE,\n#                      nsim=1, \n#                      drop=TRUE)\n\nwp_ppp_functional_jit <- rjitter(wp_ppp_functional, \n                      retry=TRUE,\n                      nsim=1, \n                      drop=TRUE)\nwp_ppp_nonfunctional_jit <- rjitter(wp_ppp_nonfunctional, \n                      retry=TRUE,\n                      nsim=1, \n                      drop=TRUE)\n\nThen, check again for duplicates\n\nany(duplicated(wp_ppp_functional_jit))\n\n[1] FALSE\n\nany(duplicated(wp_ppp_nonfunctional_jit))\n\n[1] FALSE"
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex01/Take-Home_Ex01.html#create-owin-object",
    "href": "Take-Home_Ex/Take-Home_Ex01/Take-Home_Ex01.html#create-owin-object",
    "title": "Take-Home Exercise 1",
    "section": "4.4 Create owin object",
    "text": "4.4 Create owin object\nowin object is designed to represent this polygonal region. We will be using to convert nigeria Spatial Polygon object into owin object of spatstat.\n\nCodePlotSummary\n\n\n\nnga_owin <- as(nga_sp, \"owin\")\n\n\n\n\nplot(nga_owin)\n\n\n\n\n\n\n\nsummary(nga_owin)\n\nWindow: polygonal boundary\n30 separate polygons (no holes)\n            vertices      area relative.area\npolygon 1        204 766084000       0.08870\npolygon 2         81 304399000       0.03520\npolygon 3         97 465688000       0.05390\npolygon 4        124 373051000       0.04320\npolygon 5         60 149473000       0.01730\npolygon 6         84 144820000       0.01680\npolygon 7         50 102243000       0.01180\npolygon 8         72 216002000       0.02500\npolygon 9        112 269897000       0.03130\npolygon 10       125 365142000       0.04230\npolygon 11        83 111191000       0.01290\npolygon 12       126 192557000       0.02230\npolygon 13       219 904397000       0.10500\npolygon 14       174 741131000       0.08580\npolygon 15        81 138742000       0.01610\npolygon 16        65 119452000       0.01380\npolygon 17        90 280205000       0.03240\npolygon 18        69  69814600       0.00808\npolygon 19        69  42727500       0.00495\npolygon 20        49  30458800       0.00353\npolygon 21        62 263505000       0.03050\npolygon 22        93 438930000       0.05080\npolygon 23        87 274127000       0.03170\npolygon 24       105 509979000       0.05910\npolygon 25        98 292058000       0.03380\npolygon 26        64 327765000       0.03800\npolygon 27       133 108945000       0.01260\npolygon 28       122 462169000       0.05350\npolygon 29        94 109715000       0.01270\npolygon 30        95  61239800       0.00709\nenclosing rectangle: [176503.22, 291043.82] x [331434.7, 454520.1] units\n                     (114500 x 123100 units)\nWindow area = 8635910000 square units\nFraction of frame area: 0.613\n\n\n\n\n\n\n4.4.1 Combining point events object and owin object\n\nCodePlot\n\n\n\n#wpNGA_ppp = wp_ppp[nga_owin]\n\nwpNGA_ppp_functional = wp_ppp_functional[nga_owin]\nwpNGA_ppp_nonfunctional= wp_ppp_nonfunctional[nga_owin]\n\n\n\n\n#plot(wpNGA_ppp)\n\npar(mfrow=c(1,2))\nplot(wpNGA_ppp_functional)\nplot(wpNGA_ppp_nonfunctional)\n\n\n\n\n\n\n\n\n\n4.4.2 tmap plots\nWe can further plot our water points (functional & non-functional) using tmap().\n\nOverviewwp_functionalwp_nonfunctional\n\n\nLets put both functional and non functional water points together. Also, Set the base map to be “OpenStreetMap”.\n\ntmap_mode(\"view\")\ntm_basemap(\"OpenStreetMap\") +\ntm_shape(NGA_wp) + \n  tm_polygons() + \ntm_shape(wp_functional) + \n  tm_dots(col = \"status_clean\", \n          size = 0.01, \n          border.col = \"black\", \n          border.lwd = 0.5) +\ntm_shape(wp_nonfunctional) + \n  tm_dots(col = \"status_clean\", \n          size = 0.01, \n          border.col = \"black\", \n          border.lwd = 0.5) +\n  tm_view(set.zoom.limits = c(8, 16))\n\n\n\n\n\n\nFrom this point map, even with the different colours points, it is difficult to intrepet the clusters of the functional and non-functional water points. Lets go to the next tab to look at only functional points.\n\n\n\ntmap_mode(\"view\")\ntm_basemap(\"OpenStreetMap\") +\ntm_shape(NGA_wp) + \n  tm_polygons() + \ntm_shape(wp_functional) + \n  tm_dots(col = \"status_clean\", \n          size = 0.01, \n          border.col = \"black\", \n          border.lwd = 0.5) +\n  tm_view(set.zoom.limits = c(8, 16))\n\n\n\n\n\n\nAt a macro view (zoom out), there are A LOT of functional water points. While zooming in, it looks like there’s some clusters of water points such as the border between Ife Central and Ife East. Lets take a look at the next tab, wp_nonfunctional.\n\n\n\ntmap_mode(\"view\")\ntm_basemap(\"OpenStreetMap\") +\ntm_shape(NGA_wp) + \n  tm_polygons() + \ntm_shape(wp_nonfunctional) + \n  tm_dots(col = \"status_clean\", \n          size = 0.01, \n          border.col = \"black\", \n          border.lwd = 0.5) +\n  tm_view(set.zoom.limits = c(8, 16))\n\n\n\n\n\n\nAgain, at a macro view (zoom out), there are A LOT of functional water points. While zooming in, it looks like there’s some clusters of water points such as the border between Ife Central and Ife East, which seems like the same cluster as shown in wp_functional. This highlights that point map might not suitable in identifying the clusters due to the overlapping points and categorisation. Thus, lets proceed onto the First-Order of Spatial Point Patterns Analysis to plot Kernel density maps which could provide more meaningful insights."
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex01/Take-Home_Ex01.html#kernel-density-estimation",
    "href": "Take-Home_Ex/Take-Home_Ex01/Take-Home_Ex01.html#kernel-density-estimation",
    "title": "Take-Home Exercise 1",
    "section": "5.1 Kernel Density Estimation",
    "text": "5.1 Kernel Density Estimation\nIn this section, We will be computing Functional and Non-Functional water points in Osun.\n\n5.1.1 Computing kernel density estimation using automatic bandwidth selection method\nWe will be using the bw.diggle() method than bw.ppl() because it is more suitable for this exercise to detect single tight cluster in the midst of random noise which was observed earlier section in the point maps, theres seem to be clusters, for example, along the border between Ife Central and Ife East.\n\nkde_wpNGA_functional.bw <- density(wpNGA_ppp_functional,\n                          sigma=bw.diggle,\n                          edge=TRUE,\n                          kernel=\"gaussian\") \n\nkde_wpNGA_nonfunctional.bw <- density(wpNGA_ppp_nonfunctional,\n                          sigma=bw.diggle,\n                          edge=TRUE,\n                          kernel=\"gaussian\") \n\npar(mfrow=c(1,2))\nplot(kde_wpNGA_functional.bw)\nplot(kde_wpNGA_nonfunctional.bw)\n\n\n\n\nIt looks the unit of measurement is of the default value in meter. That’s why the density values computed is in “number of points per square meter”.\nBefore moving to the next section, let’s retrieve the bandwidth used to compute the KDE layer.\n\nbw_functional\n\n\n\n#bw <- bw.diggle(wpNGA_ppp)\n#bw\nbw_functional <- bw.diggle(wpNGA_ppp_functional)\nbw_functional\n\n   sigma \n252.1687 \n\n\n\nbw_nonfunctional <- bw.diggle(wpNGA_ppp_nonfunctional)\nbw_nonfunctional\n\n   sigma \n308.2061 \n\n\n\n\n\n\n\n5.1.2 Rescalling KDE values\n\nwpNGA_ppp_functional.km <- rescale(wpNGA_ppp_functional, 1000, \"km\")\nwpNGA_ppp_nonfunctional.km <- rescale(wpNGA_ppp_nonfunctional, 1000, \"km\")\n\n\n#kde_wpNGA.bw <- density(wpNGA_ppp.km, sigma=bw.diggle, edge=TRUE, #kernel=\"gaussian\")\n#plot(kde_wpNGA.bw)\n\n\nkde_wpNGA_functional.bw <- density(wpNGA_ppp_functional.km,\n                          sigma=bw.diggle,\n                          edge=TRUE,\n                          kernel=\"gaussian\") \n\nkde_wpNGA_nonfunctional.bw <- density(wpNGA_ppp_nonfunctional.km,\n                          sigma=bw.diggle,\n                          edge=TRUE,\n                          kernel=\"gaussian\") \n\npar(mfrow=c(1,2))\nplot(kde_wpNGA_functional.bw)\nplot(kde_wpNGA_nonfunctional.bw)\n\n\n\n\nUnlike the point map, from the above KDE maps, it highlight the signifcant clusters and much easier to identify the clusters of functional and non-functional water points clusters."
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex01/Take-Home_Ex01.html#adaptive-kde",
    "href": "Take-Home_Ex/Take-Home_Ex01/Take-Home_Ex01.html#adaptive-kde",
    "title": "Take-Home Exercise 1",
    "section": "5.2 Adaptive KDE",
    "text": "5.2 Adaptive KDE\n\n5.2.1 Computing KDE by using adaptive bandwidth\nFixed bandwidth method is very sensitive to highly skew distribution of spatial point patterns over geographical units for example urban versus rural. Hence, for this exercise, we will be using adaptive bandwidth instead.\n\nkde_wpNGA_functional_adaptivekde_wpNGA_nonfunctional_adaptive\n\n\nLets look at functional wp in adaptive bandwidth then move on the next tab for the non-functional.\n\n#kde_wpNGA_adaptive <- adaptive.density(wpNGA_ppp.km, method=\"kernel\")\n#plot(kde_wpNGA_adaptive)\n\npar(mfrow=c(1,2))\n\nkde_wpNGA_functional_adaptive <- adaptive.density(wpNGA_ppp_functional.km, method=\"kernel\")\nplot(kde_wpNGA_functional_adaptive)\nplot(kde_wpNGA_functional.bw)\n\n\n\n\n\n\n\nkde_wpNGA_nonfunctional_adaptive <- adaptive.density(wpNGA_ppp_nonfunctional.km, method=\"kernel\")\nplot(kde_wpNGA_nonfunctional_adaptive)\n\n\n\nplot(kde_wpNGA_nonfunctional.bw)\n\n\n\n\nOBSERVATION Well it seems like theres isnt signficant changes to the functional BUT if u take a closer look at the non-functional map, some points are now lower in density with this adaptive bandwidth.\n\n\n\n\n\n5.2.2 Converting KDE output into grid object\nTo make the KDE output is suitable for mapping purposes.\n\nFunctional2. Non-Functional\n\n\n\n#gridded_kde_wpNGA_bw <- as.SpatialGridDataFrame.im(kde_wpNGA.bw)\n#spplot(gridded_kde_wpNGA_bw)\n\ngridded_kde_wpNGA_func_bw <- as.SpatialGridDataFrame.im(kde_wpNGA_functional.bw)\nspplot(gridded_kde_wpNGA_func_bw)\n\n\n\n\n\n\n\ngridded_kde_wpNGA_nfunc_bw <- as.SpatialGridDataFrame.im(kde_wpNGA_nonfunctional.bw)\nspplot(gridded_kde_wpNGA_nfunc_bw)\n\n\n\n\n\n\n\n\n5.2.2.1 Converting gridded output into raster\nNext, we will convert the gridded kernal density objects into RasterLayer object by using raster() of raster package.\n\n1. Convert2. Assigning projection systems3. tmap (functional)4. tmap (non-functional)\n\n\n\n#kde_wpNGA_bw_raster <- raster(gridded_kde_wpNGA_bw)\n#kde_wpNGA_bw_raster\n\nkde_wpNGA_func_bw_raster <- raster(gridded_kde_wpNGA_func_bw)\nkde_wpNGA_func_bw_raster\n\nclass      : RasterLayer \ndimensions : 128, 128, 16384  (nrow, ncol, ncell)\nresolution : 0.8948485, 0.9616045  (x, y)\nextent     : 176.5032, 291.0438, 331.4347, 454.5201  (xmin, xmax, ymin, ymax)\ncrs        : NA \nsource     : memory\nnames      : v \nvalues     : -5.092436e-15, 25.49435  (min, max)\n\nkde_wpNGA_nfunc_bw_raster <- raster(gridded_kde_wpNGA_nfunc_bw)\nkde_wpNGA_nfunc_bw_raster\n\nclass      : RasterLayer \ndimensions : 128, 128, 16384  (nrow, ncol, ncell)\nresolution : 0.8948485, 0.9616045  (x, y)\nextent     : 176.5032, 291.0438, 331.4347, 454.5201  (xmin, xmax, ymin, ymax)\ncrs        : NA \nsource     : memory\nnames      : v \nvalues     : -3.925434e-15, 20.49412  (min, max)\n\n\n\n\nWHY? - crs property is NA during the convert\n\n#projection(kde_wpNGA_bw_raster) <- CRS(\"+init=EPSG:3414\")\n#kde_wpNGA_bw_raster\n\nprojection(kde_wpNGA_func_bw_raster) <- CRS(\"+init=EPSG:3414\")\nkde_wpNGA_func_bw_raster\n\nclass      : RasterLayer \ndimensions : 128, 128, 16384  (nrow, ncol, ncell)\nresolution : 0.8948485, 0.9616045  (x, y)\nextent     : 176.5032, 291.0438, 331.4347, 454.5201  (xmin, xmax, ymin, ymax)\ncrs        : +proj=tmerc +lat_0=1.36666666666667 +lon_0=103.833333333333 +k=1 +x_0=28001.642 +y_0=38744.572 +ellps=WGS84 +units=m +no_defs \nsource     : memory\nnames      : v \nvalues     : -5.092436e-15, 25.49435  (min, max)\n\nprojection(kde_wpNGA_nfunc_bw_raster) <- CRS(\"+init=EPSG:3414\")\nkde_wpNGA_nfunc_bw_raster\n\nclass      : RasterLayer \ndimensions : 128, 128, 16384  (nrow, ncol, ncell)\nresolution : 0.8948485, 0.9616045  (x, y)\nextent     : 176.5032, 291.0438, 331.4347, 454.5201  (xmin, xmax, ymin, ymax)\ncrs        : +proj=tmerc +lat_0=1.36666666666667 +lon_0=103.833333333333 +k=1 +x_0=28001.642 +y_0=38744.572 +ellps=WGS84 +units=m +no_defs \nsource     : memory\nnames      : v \nvalues     : -3.925434e-15, 20.49412  (min, max)\n\n\n\n\nLets display the raster in cartographic quality map using tmap package.\n\ntm_shape(kde_wpNGA_func_bw_raster) + \n  tm_raster(\"v\") +\n  tm_layout(legend.position = c(\"right\", \"bottom\"), frame = FALSE)\n\n\n\n\n\n\n\n\ntm_shape(kde_wpNGA_nfunc_bw_raster) + \n  tm_raster(\"v\") +\n  tm_layout(legend.position = c(\"right\", \"bottom\"), frame = FALSE)\n\n\n\n\n\n\n\n\n\n\n\n5.2.3 Spatial Point Patterns using KDE\n\n5.2.3.1 Extract Osun\nIn this section, we will be comparing KDE of water points at Osun as the study area.\n\n#osun = NGA_sc[wp_sc$clean_adm1 == \"Osun\",]\nosun = NGA_sc\n\nplot(osun, main = \"Osun\")\n\n\n\n\n\n\n5.2.3.2 Converting the spatial point data frame into generic sp format\n\nosun_sp = as(osun, \"SpatialPolygons\")\n\n\n\n5.2.3.3 Creating owin object\n\nosun_owin = as(osun_sp, \"owin\")\n\n\n\n5.2.3.4 Combining wp points and Osun (Study Area)\n\nwp_osun_ppp_func = wp_ppp_functional_jit[osun_owin]\nwp_osun_ppp_nfunc = wp_ppp_nonfunctional_jit[osun_owin]\n\nNext, rescale() function is used to trasnform the unit of measurement from metre to kilometre.\n\nwp_osun_ppp_func.km = rescale(wp_osun_ppp_func, 1000, \"km\")\nwp_osun_ppp_nfunc.km = rescale(wp_osun_ppp_nfunc, 1000, \"km\")\n\nAfter that, we do the plotting\n\npar(mfrow=c(1,2))\nplot(wp_osun_ppp_func.km, main=\"Osun Functional\")\nplot(wp_osun_ppp_nfunc.km, main=\"Osun Non-Functional\")\n\n\n\n\n\n\n5.2.3.5 Computing KDE\nThe code chunk below will be used to compute the KDE of these four planning area. bw.diggle method is used to derive the bandwidth of each\n\npar(mfrow=c(1,2))\nplot(density(wp_osun_ppp_func.km,\n             sigma=bw.diggle, \n             edge=TRUE, \n             kernel=\"gaussian\"),\n     main=\"Osun Functional\")\n\nplot(density(wp_osun_ppp_nfunc.km,\n             sigma=bw.diggle, \n             edge=TRUE, \n             kernel=\"gaussian\"),\n     main=\"Osun Non-Functional\")"
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex01/Take-Home_Ex01.html#analysing-spatial-point-process-using-g-function",
    "href": "Take-Home_Ex/Take-Home_Ex01/Take-Home_Ex01.html#analysing-spatial-point-process-using-g-function",
    "title": "Take-Home Exercise 1",
    "section": "6.1 Analysing Spatial Point Process Using G-Function",
    "text": "6.1 Analysing Spatial Point Process Using G-Function\nIn this section, the G function measures the distances between any two events and their respective nearest neighbours. Using spatstat package’s Gest() and envelope() to run a Monte Carlo simulation test, which is used to predict the probability of a range of outcomes when the possibility of random variables is present.\n\nFunctionalNon-Functional\n\n\n\n6.1.1 1. Computing G-function estimation (Functional)\nLets start with the functional.\n\nG_func_osun = Gest(wp_osun_ppp_func, correction = \"border\")\nplot(G_func_osun, xlim=c(0,500))\n\n\n\n\n\n\n6.1.2 2. Performing Complete Spatial Randomness Test (Functional)\nNext, we will be conducting a hypothesis test to confirm the observed spatial patterns above. The hypothesis and test are as follows:\nHo = The distribution of non-functional water points in Osun, Nigeria are randomly distributed.\nH1= The distribution of non-functional water points in Osun, Nigeria are NOT randomly distributed.\nThe null hypothesis will be rejected if p-value is smaller than alpha value of 0.05.\nMonte Carlo test with G-function\n\nG_func_osun.csr <- envelope(wp_osun_ppp_func, Gest, nsim = 39)\n\nGenerating 39 simulations of CSR  ...\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38,  39.\n\nDone.\n\n\n\nplot(G_func_osun.csr)\n\n\n\n\nConclusion From func_osun.csr, it is observed that at 95% confidence interval, the G(r) far above the G(theo) and the envelope. This implies that the functional water points in Osun, Nigeria are clustered. Thus, we can reject the null hypothesis that the distribution of functional water points are randomly distributed.\n\n\n\n\n6.1.3 3. Computing G-function estimation (Non-Functional)\nNext, Non-functional\n\nG_nfunc_osun = Gest(wp_osun_ppp_nfunc, correction = \"border\")\nplot(G_nfunc_osun, xlim=c(0,500))\n\n\n\n\n\n\n6.1.4 4. Performing Complete Spatial Randomness Test (Non-Functional)\nNext, we will be conducting a hypothesis test to confirm the observed spatial patterns above. The hypothesis and test are as follows:\nHo = The distribution of non-functional water points in Osun, Nigeria are randomly distributed.\nH1= The distribution of non-functional water points in Osun, Nigeria are NOT randomly distributed.\nThe null hypothesis will be rejected if p-value is smaller than alpha value of 0.05.\nMonte Carlo test with G-function\n\nG_nfunc_osun.csr <- envelope(wp_osun_ppp_nfunc, Gest, nsim = 39)\n\nGenerating 39 simulations of CSR  ...\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38,  39.\n\nDone.\n\n\n\nplot(G_nfunc_osun.csr)\n\n\n\n\nConclusion From nfunc_osun.csr, it is observed that at 95% confidence interval, the G(r) far above the G(theo) and the envelope. This implies that the non-functional water points in Osun, Nigeria are clustered. Thus, we can reject the null hypothesis that the distribution of non-functional water points are randomly distributed."
  },
  {
    "objectID": "In-class_Ex/In-class_Ex05/data/stores.html",
    "href": "In-class_Ex/In-class_Ex05/data/stores.html",
    "title": "is415-GAA",
    "section": "",
    "text": "<!DOCTYPE qgis PUBLIC ‘http://mrcc.com/qgis.dtd’ ‘SYSTEM’>     \n\n\n        0 0     false"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex05/data/study_area.html",
    "href": "In-class_Ex/In-class_Ex05/data/study_area.html",
    "title": "is415-GAA",
    "section": "",
    "text": "<!DOCTYPE qgis PUBLIC ‘http://mrcc.com/qgis.dtd’ ‘SYSTEM’>     dataset\n\n\n        0 0     false"
  }
]