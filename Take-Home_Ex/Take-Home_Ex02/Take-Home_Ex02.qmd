---
title: "Take-Home_Ex02"
date: "13 Feb 2023"
date-modified: "`r Sys.Date()`"
number-sections: true
format: html
execute: 
  echo: true
  eval: true
  warning: false
editor: visual
---

# Overview

## Context

As a result of the COVID-19 outbreak in Indonesia, a widespread immunization campaign is currently being conducted there. The program was launched on January 13, 2021, when President Joko Widodo had his vaccination at the presidential palace. Indonesia is ranked third in Asia and fifth overall for total dosages administered.

Wikipedia states that as of February 5, 2023, at 18:00 WIB (UTC+7), 204,266,655 individuals had received the first dose of the vaccine and 175,131,893 individuals had received the full course of vaccination; 69,597,474 of these individuals had received the booster dose or third dose, and 1,585,164 had received the fourth dose. With 103.46% of the population fully immunized, Jakarta has the highest rate, followed by Bali and the Special Region of Yogyakarta with 85.45% and 83.02%, respectively.

## Objectives

Exploratory Spatial Data Analysis (ESDA) hold tremendous potential to address complex problems facing society. In this study, you are tasked to apply appropriate Local Indicators of Spatial Association (LISA) and Emerging Hot Spot Analysis (EHSA) to undercover the spatio-temporal trends of COVID-19 vaccination in DKI Jakarta.

## Task

Choropleth Mapping and Analysis

-   Compute the monthly vaccination rate from July 2021 to June 2022 at sub-district (also known as kelurahan in Bahasa Indonesia) level,

-   Prepare the monthly vaccination rate maps by using appropriate tmap functions,

-   Describe the spatial patterns revealed by the choropleth maps (not more than 200 words).

## Data used

| Type       | Name                                     | Format | Description                   | Source                                   |
|---------------|---------------|---------------|---------------|---------------|
| Aspatial   | Riwayat File Vaksinasi DKI Jakarta       | csv    | Daily vaccination data        | Open Data Vaksinasi Provinsi DKI Jakarta |
| Geospatial | DKI Jakarta administration boundary 2019 | SHP    | geoBoundaries data of Jakarta | Indonesia Geospatial                     |

: Table 1: Data used

For the Aspatial Data, I decided to use the dataset available on 1st Sept 2022 for this exercise.

## Packages used

For this exercise, we'll be using the following packages:

-   sf: Manage and process vector-based geospatial data in R

-   sfdep:

-   maptools: Convert Spatial objects into ppp format of spatstat

-   tmap: Plotting cartographic quality static point patterns maps or interactive maps by using leaflet API

-   tidyverse: a collection of functions, data, and documentation that extends the capabilities of base R.

-   knitr:

-   readxl: The readxl package makes it easy to get data out of Excel and into R

We will be using p_load function of pacman package to install and load required packages.

```{r}
pacman::p_load(sf, sfdep, tmap, maptools, tidyverse, knitr, readxl)
```

# Data wrangling: Geospatial data

## Importing Geospatial

::: panel-tabset
### Import

```{r}
jkt <- st_read(dsn = "data/geospatial/BATAS DESA DESEMBER 2019 DUKCAPIL DKI JAKARTA", 
                layer = "BATAS_DESA_DESEMBER_2019_DUKCAPIL_DKI_JAKARTA")
```

### Glimpse

```{r}
glimpse(jkt)
```
:::

## Data Pre-processing

We got to first ensure 2 things: validity of geomeetries and if there are missing values that could affect the later section of calculations and visualisations. 

Reference was taken from the senior sample submissions for the code for this section, with credit to [Take-Home Exercise 1: Analysing and Visualising Spatio-temporal Patterns of COVID-19 in DKI Jakarta, Indonesia by MEGAN SIM TZE YEN.](https://is415-msty.netlify.app/posts/2021-09-10-take-home-exercise-1/)



### Validity of geometry 
Using st_is_valid function to check 
```{r}
length(which(st_is_valid(jkt) == FALSE))
```

Since theres no invalids geometrics, we move to missing values

### Missing values

```{r}
jkt[rowSums(is.na(jkt))!=0,]
```

From the output, Columns with missing values (KAB_KOTA (City), KECAMATAN (District) and DESA_KELUR (Village)) as well as other fields since its from the same 2 rows (243 & 244), we can just remove these.

```{r}
jkt <- na.omit(jkt,c("DESA_KELUR"))
```


### Validate & Transform jkt CRS
Moving on, we gotta to validate the CRS of jarkarta

```{r}
# retrieves the crs
st_crs(jkt)
```


So the assigned coordinates system is WGS 84 (aka World Geodetic System 1984) therefore, we got to change it to crs of Indonesia, DGN95 using the code of 23845.

```{r}
jkt <- st_transform(jkt, 23845)
```

```{r}
st_crs(jkt)
```

It changed.

## Visualise data

```{r}
plot(st_geometry(jkt))
```

From the plot, jkt has both the mainland and outer islands but since outer islands are not within the objectives and tasks, so we can remove those.

Using google translate/google len, 3 location-based relevant fields are KAB_KOTA (City), KECAMATAN (District) and DESA_KELUR (Village). Let's to the macro lens to city level since district would be too much of unique values. 

```{r}
unique(jkt$"KAB_KOTA")
```

```{r}
tm_shape(jkt) + 
  tm_polygons("KAB_KOTA")
```

### Remove outer islands
```{r}
jkt <- filter(jkt, KAB_KOTA != "KEPULAUAN SERIBU")
```

### Select & Filter
```{r}
jkt <- jkt[, 0:9]
```

### Rename the fields
For easier and faster progress of assignment, lets rename the columns names 
```{r}
# with reference to: https://www.codegrepper.com/code-examples/r/rename+column+name+in+r

jkt <- jkt %>% 
  dplyr::rename(
    Object_ID=OBJECT_ID,
    Province=PROVINSI, 
    City=KAB_KOTA, 
    District=KECAMATAN, 
    Village_Code=KODE_DESA, 
    Village=DESA, 
    Sub_District=DESA_KELUR,
    Code=KODE, 
    Total_Population=JUMLAH_PEN
    )
```


## EDA
```{r}
tm_shape(jkt) + 
  tm_polygons("City")
```


# Data wrangling with Aspatial Data

## Importing Aspatial

For the Choropleth mapping, the time frame to plot the map is from July 2021 to June 2022, i will be using the first day of the month of each month. ::: panel-tabset

### From July 2021 to Dec 2021

::: panel-tabset
#### 1st Jul 2021

```{r}
jkt_jul2021 <- read_excel("data/aspatial/Data Vaksinasi Berbasis Kelurahan (01 Juli 2021).xlsx")
#jkt_july2021 |> select(4)
```

#### 1st Aug 2021

```{r}
jkt_aug2021 <- read_excel("data/aspatial/Data Vaksinasi Berbasis Kelurahan (1 Agustus 2021).xlsx")
```

#### 1st Sept 2021

```{r}
jkt_sept2021 <- read_excel("data/aspatial/Data Vaksinasi Berbasis Kelurahan (01 September 2021).xlsx")
```

#### 1st Oct 2021

```{r}
jkt_oct2021 <- read_excel("data/aspatial/Data Vaksinasi Berbasis Kelurahan (01 Oktober 2021).xlsx")
```

#### 1st Nov 2021

```{r}
jkt_nov2021 <- read_excel("data/aspatial/Data Vaksinasi Berbasis Kelurahan (01 November 2021).xlsx")
```

#### 1st Dec 2021

```{r}
jkt_dec2021 <- read_excel("data/aspatial/Data Vaksinasi Berbasis Kelurahan (01 Desember 2021).xlsx")
```
::: 


### From Jan 2022 to June 2022

::: panel-tabset
#### 1st Jan 2022

```{r}
jkt_jan2022 <- read_excel("data/aspatial/Data Vaksinasi Berbasis Kelurahan (01 Januari 2022).xlsx")
```

#### 1st Feb 2022

```{r}
jkt_feb2022 <- read_excel("data/aspatial/Data Vaksinasi Berbasis Kelurahan (01 Februari 2022).xlsx")
```

#### 1st Mar 2022

```{r}
jkt_mar2022 <- read_excel("data/aspatial/Data Vaksinasi Berbasis Kelurahan (02 Maret 2022).xlsx")
```

#### 1st Apr 2022

```{r}
jkt_apr2022 <- read_excel("data/aspatial/Data Vaksinasi Berbasis Kelurahan (01 April 2022).xlsx")
```

#### 1st May 2022

```{r}
jkt_may2022 <- read_excel("data/aspatial/Data Vaksinasi Berbasis Kelurahan (01 Mei 2022).xlsx")
```

#### 1st June 2022

```{r}
jkt_jun2022 <- read_excel("data/aspatial/Data Vaksinasi Berbasis Kelurahan (01 Juni 2022).xlsx")
```
:::


### Glimpse

```{r}
#glimpse(jkt_july2021)
```



## Perform relational join

```{r}
# jkt_jul2021 <- left_join(jkt,jkt_jul2021)%>%
#   select(1:4, 7, 15)
```

```{r}
# basemap <- tm_shape(jkt_jul2021) +
#   tm_polygons() +
#   tm_text("KECAMATAN", size=0.5)
# 
# subdistrict <- qtm(jkt_jul2021, "TOTAL VAKSIN DIBERIKAN")
# tmap_arrange(basemap, subdistrict, asp=1, ncol=2)
```
