---
title: "Take-Home_Ex02"
date: "13 Feb 2023"
date-modified: "`r Sys.Date()`"
number-sections: true
format: html
execute: 
  echo: true
  eval: true
  warning: false
editor: visual
---

# Overview

## Context

As a result of the COVID-19 outbreak in Indonesia, a widespread immunization campaign is currently being conducted there. The program was launched on January 13, 2021, when President Joko Widodo had his vaccination at the presidential palace. Indonesia is ranked third in Asia and fifth overall for total dosages administered.

Wikipedia states that as of February 5, 2023, at 18:00 WIB (UTC+7), 204,266,655 individuals had received the first dose of the vaccine and 175,131,893 individuals had received the full course of vaccination; 69,597,474 of these individuals had received the booster dose or third dose, and 1,585,164 had received the fourth dose. With 103.46% of the population fully immunized, Jakarta has the highest rate, followed by Bali and the Special Region of Yogyakarta with 85.45% and 83.02%, respectively.

## Objectives

Exploratory Spatial Data Analysis (ESDA) hold tremendous potential to address complex problems facing society. In this study, you are tasked to apply appropriate Local Indicators of Spatial Association (LISA) and Emerging Hot Spot Analysis (EHSA) to undercover the spatio-temporal trends of COVID-19 vaccination in DKI Jakarta.

## Task

Choropleth Mapping and Analysis

-   Compute the monthly vaccination rate from July 2021 to June 2022 at sub-district (also known as kelurahan in Bahasa Indonesia) level,

-   Prepare the monthly vaccination rate maps by using appropriate tmap functions,

-   Describe the spatial patterns revealed by the choropleth maps (not more than 200 words).

Local Gi\* Analysis

With reference to the vaccination rate maps prepared in ESDA:

Compute local Gi\* values of the monthly vaccination rate,

-   Display the Gi\* maps of the monthly vaccination rate. The maps should only display the significant (i.e. p-value \< 0.05)

-   With reference to the analysis results, draw statistical conclusions (not more than 250 words).

Emerging Hot Spot Analysis(EHSA)

With reference to the local Gi\* values of the vaccination rate maps prepared in the previous section:

-   Perform Mann-Kendall Test by using the spatio-temporal local Gi\* values,

-   Select three sub-districts and describe the temporal trends revealed (not more than 250 words), and

-   Prepared a EHSA map of the Gi\* values of vaccination rate. The maps should only display the significant (i.e. p-value \< 0.05).

-   With reference to the EHSA map prepared, describe the spatial patterns revelaed. (not more than 250 words).

## Data used

| Type       | Name                                     | Format | Description                   | Source                                   |
|------------|------------------------------------------|--------|-------------------------------|------------------------------------------|
| Aspatial   | Riwayat File Vaksinasi DKI Jakarta       | csv    | Daily vaccination data        | Open Data Vaksinasi Provinsi DKI Jakarta |
| Geospatial | DKI Jakarta administration boundary 2019 | SHP    | geoBoundaries data of Jakarta | Indonesia Geospatial                     |

: Table 1: Data used

For the Aspatial Data, We will be using dataset available on 1st day of the set time period (from july 2021 to jun 2022)

## Packages used

For this exercise, we'll be using the following packages:

-   sf: Manage and process vector-based geospatial data in R

-   sfdep: Creates an sf and tidyverse friendly interface to the package as well as introduces new functionality that is not present in spdep.

-   maptools: Convert Spatial objects into ppp format of spatstat

-   tmap: Plotting cartographic quality static point patterns maps or interactive maps by using leaflet API

-   tidyverse: a collection of functions, data, and documentation that extends the capabilities of base R.

-   knitr: A General-Purpose Package for Dynamic Report Generation in R

-   kableExtra: an extension of kable, used for table customisation

-   dplyr: for wrangling and transforming data

-   readxl: The readxl package makes it easy to get data out of Excel and into R

-   plyr: used for splitting data, applying functions and combining results

-   zoo: An S3 class with methods for totally ordered indexed observations, used for the time series.

We will be using p_load function of pacman package to install and load required packages.

```{r}
pacman::p_load(sf, sfdep, tmap, maptools, tidyverse, knitr, readxl, kableExtra, dplyr, plyr, zoo)
```

# Data wrangling: Geospatial data

## Importing Geospatial

::: panel-tabset
### Import

```{r}
jkt <- st_read(dsn = "data/geospatial/BATAS DESA DESEMBER 2019 DUKCAPIL DKI JAKARTA", 
                layer = "BATAS_DESA_DESEMBER_2019_DUKCAPIL_DKI_JAKARTA")
```

### Glimpse

```{r}
glimpse(jkt)
```
:::

## Data Pre-processing

We got to first ensure 2 things: validity of geomeetries and if there are missing values that could affect the later section of calculations and visualisations.

Reference for this section of Choropleth Mapping was taken from the senior sample submissions for the code for this section, with credit to [Take-Home Exercise 1: Analysing and Visualising Spatio-temporal Patterns of COVID-19 in DKI Jakarta, Indonesia by MEGAN SIM TZE YEN.](https://is415-msty.netlify.app/posts/2021-09-10-take-home-exercise-1/)

### Validity of geometry

Using st_is_valid function to check

```{r}
length(which(st_is_valid(jkt) == FALSE))
```

Since theres no invalids geometrics, we move to missing values

### Missing values

::: panel-tabset
#### 1. Check of missing values

```{r}
jkt[rowSums(is.na(jkt))!=0,]
```

From the output, Columns with missing values (KAB_KOTA (City), KECAMATAN (District) and DESA_KELUR (Sub-District)) as well as other fields since its from the same 2 rows (243 & 244), we can just remove these.

#### 2. Remove missing values

```{r}
jkt <- na.omit(jkt,c("DESA_KELUR"))
```

#### 3. Check again for missing value

```{r}
jkt[rowSums(is.na(jkt))!=0,]
```
:::

### Validate & Transform jkt CRS

Moving on, we gotta to validate the CRS of jarkarta

::: panel-tabset
#### 1. Check the current crs

```{r}
# retrieves the crs
st_crs(jkt)
```

So the assigned coordinates system is WGS 84 (aka World Geodetic System 1984) therefore, we got to change it to crs of Indonesia, DGN95 using the code of 23845.

#### 2. Transform crs

```{r}
jkt <- st_transform(jkt, 23845)
```

#### 3. Check crs again

```{r}
st_crs(jkt)
```

It changed.
:::

## Visualise data

```{r}
plot(st_geometry(jkt))
```

From the plot, jkt has both the mainland and outer islands but since outer islands are not within the objectives and tasks, so we can remove those.

Using google translate, 3 location-based relevant fields are KAB_KOTA (City), KECAMATAN (District) and DESA_KELUR (Village). Let's to the macro lens to city level since district would be too much of unique values.

```{r}
unique(jkt$"KAB_KOTA")
```

```{r}
tm_shape(jkt) + 
  tm_polygons("KAB_KOTA")
```

### Remove outer islands

```{r}
jkt <- filter(jkt, KAB_KOTA != "KEPULAUAN SERIBU")
```

### Select & Filter

```{r}
jkt <- jkt[, 0:9]
```

### Rename the fields

For easier and faster progress of assignment, lets rename the columns names

```{r}
# with reference to: https://www.codegrepper.com/code-examples/r/rename+column+name+in+r

jkt <- jkt %>% 
  dplyr::rename(
    Object_ID=OBJECT_ID,
    Province=PROVINSI, 
    City=KAB_KOTA, 
    District=KECAMATAN, 
    Village_Code=KODE_DESA, 
    Village=DESA, 
    Sub_District=DESA_KELUR,
    Code=KODE, 
    Total_Population=JUMLAH_PEN
    )
```

## EDA

```{r}
#| code-fold: true
#| code-summary: "Show the code"
tm_shape(jkt) + 
  tm_polygons("City")
```

# Data wrangling with Aspatial Data

## Inspect Aspatial Data

For the Choropleth mapping, the time frame to plot the map is from July 2021 to June 2022, i will be using the first day of the month of each month.

Before we import, lets see one of the data first.

```{r}
#July 2021
jkt_jul2021 <- read_excel("data/aspatial/Data Vaksinasi Berbasis Kelurahan (01 Juli 2021) vac.xlsx")

glimpse(jkt_jul2021)
```

Theres isnt duplicates columns so lets select the relevant columns to our exercise.

What to do for pre-processing (Aspatial Data):

-   select relevant columns only

-   Rename those columns names

| Original ver | Translated ver       |
|--------------|----------------------|
| WILAYAH KOTA | City                 |
| KECAMATAN    | District             |
| KELURAHAN    | Sub_District         |
| SASARAN      | Target               |
| BELUM VAKSIN | Yet to be Vaccinated |

## A function to take in the Aspatial files in the specific path

```{r}
# takes in an aspatial data filepath and returns a processed output
aspatial_preprocess <- function(filepath){
  # the .name_repair="minimal" is to indicate not to replace duplicate column names with 'NAME...n' like we saw above!
  # reference: https://readxl.tidyverse.org/articles/articles/column-names.html
  result_file <- read_xlsx(filepath, .name_repair="minimal")
  
  # Remove Duplicate Columns
  # essentially, it's saying "take the columns that aren't duplicated, and if there are duplicates, take the last duplicate"
  # we use fromLast = TRUE to ensure that we keep the last duplicated column
  # reference: https://www.marsja.se/how-to-remove-duplicates-in-r-rows-columns-dplyr/
  # reference: https://stackoverflow.com/questions/16905425/find-duplicate-values-in-r
  result_file <- result_file[, !duplicated(colnames(result_file), fromLast = TRUE)] 
  
  # Create the Date Column
  # the format of our files is: Standar Kelurahan Data Corona (DD Month YYYY Pukul Ti.me)
  # while the start is technically "(", "(" is part of a regular expression and leads to a warning message, so we'll use "Corona" instead. The [[1]] refers to the first element in the list.
  # we're loading it as DD-Month-YYYY format
  # the end is 1 space before "Pukul", which means we have to -2 spaces (one for P, one for space)
  # as such, the most relevant functions are substr (returns a substring) and either str_locate (returns location of substring as an integer matrix) or gregexpr (returns a list of locations of substring)
  # reference https://stackoverflow.com/questions/14249562/find-the-location-of-a-character-in-string
  startpoint <- gregexpr(pattern="Kelurahan", filepath)[[1]] + 11
  endpoint <- gregexpr(pattern="vac", filepath)[[1]] - 3
  result_file$Date <- substr(filepath, startpoint, endpoint)
  
  # Retain the Relevant Columns
  result_file <- result_file %>% 
    select("Date", 
           "KODE KELURAHAN", 
           "WILAYAH KOTA", 
           "KECAMATAN", 
           "KELURAHAN", 
           "SASARAN",
           "BELUM VAKSIN")
  
  return(result_file)
}
```

Lets Test out to see if theres a date column.

```{r}
test_jul2021 = aspatial_preprocess("data/aspatial/Data Vaksinasi Berbasis Kelurahan (01 Juli 2021) vac.xlsx")
```

Great, its there. Now lets do for all the Aspatial files

## Feeding Files into our aspatial_preprocess function

```{r}
# in the folder 'data/aspatial', find files with the extension '.xlsx' and add it to our fileslist 
# the full.names=TRUE prepends the directory path to the file names, giving a relative file path - otherwise, only the file names (not the paths) would be returned 
# reference: https://stat.ethz.ch/R-manual/R-devel/library/base/html/list.files.html
fileslist <-list.files(path = "data/aspatial", pattern = "*.xlsx", full.names=TRUE)

# afterwards, for every element in fileslist, apply aspatial_process function
dflist <- lapply(seq_along(fileslist), function(x) aspatial_preprocess(fileslist[x]))
```

we'll need to convert the dflist into an actual dataframe with ldply()

```{r}
vaccine_jkt <- ldply(dflist, data.frame)
```

Let's check what vaccine_jkt looks like, and make sure the columns are correct.

```{r}
glimpse(vaccine_jkt)
```

## Format Date Column of the Aspatial data

The dates now are in substring format, we got to convert into datetime format, with the additional consideration that the month are in Bahasa Indonesian.

```{r}
# parses the 'Date' column into Month(Full Name)-YYYY datetime objects
# reference: https://stackoverflow.com/questions/53380650/b-y-date-conversion-gives-na

# locale="ind" means that the locale has been set as Indonesia
Sys.setlocale(locale="ind")
```

```{r}
vaccine_jkt$Date <- c(vaccine_jkt$Date) %>% 
  as.Date(vaccine_jkt$Date, format ="%d %B %Y")

glimpse(vaccine_jkt)
```

## Renaming Columns with Translation

```{r}
# renames the columns in the style New_Name = OLD_NAME
vaccine_jkt <- vaccine_jkt %>% 
  dplyr::rename(
    Date=Date,
    Code=KODE.KELURAHAN, 
    City=WILAYAH.KOTA, 
    District=KECAMATAN, 
    Sub_District=KELURAHAN,
    Target=SASARAN, 
    Yet_to_be_vaccinated=BELUM.VAKSIN
    )
```

## Further Data Processing

Now that we have our confirmed dataframe, let's execute any pre-processing we might have missed. Firstly, let's check for missing values:

```{r}
# returns rows that contain NA values
vaccine_jkt[rowSums(is.na(vaccine_jkt))!=0,]
```

OH so these are the rows of each starting aspatial data files that has the total values. Anyways, we got to remove these then

```{r}
# removes rows that have an NA value in ID
vaccine_jkt <- na.omit(vaccine_jkt,c("code"))
```

Lets check again

```{r}
# returns rows that contain NA values
vaccine_jkt[rowSums(is.na(vaccine_jkt))!=0,]
```

Great. its removed.

## New column - Actual vaccination count

use the target - the yet to vaccinated column and put into new column Actual_Vaccination_Rate

```{r}
#reference taken from: https://stackoverflow.com/questions/23888037/subtracting-two-columns-to-give-a-new-column-in-r

vaccine_jkt$Vaccinated <- (vaccine_jkt$Target - vaccine_jkt$Yet_to_be_vaccinated)

glimpse(vaccine_jkt)
```

# Geospatial Data Integration

## Preliminary joining + EDA

Now that we have both the geospatial and aspatial data frames, we'll need to join them. A quick look at their headers tell us what their common fields are:

```{r}
# checks for column names of the dataframes
colnames(jkt)
```

```{r}
# checks for column names of the dataframes
colnames(vaccine_jkt)
```

It seems that the City, Distict and Sub_District should match up. Let's try doing that first:

```{r}
# joins cases_jakarta to bd_jakarta based on Province, Sub_District and City
combined_jkt <- left_join(jkt, vaccine_jkt,
                              by=c(
                                "District"="District", 
                                "Sub_District"="Sub_District",
                                "City"="City")
                              )
```

Now, let's visualise our current combined_jkt in terms of vaccination rates:

```{r}
# maps the monthly vaccination rates


vaccinated = tm_shape(combined_jkt)+
  tm_fill("Vaccinated") +
  tm_borders(alpha = 0.5) +
  tm_layout(main.title="Vaccination Rate July2021")
vaccinated
```

## Identifying Mismatched Sub-District Records

```{r}
# checks for unique values of Sub_District in cases_jakarta that aren't already present in bd_jakarta and vice versa
vaccine_subdistrict <- c(vaccine_jkt$Sub_District)
jkt_subdistrict <- c(jkt$Sub_District)

unique(vaccine_subdistrict[!(vaccine_subdistrict %in% jkt_subdistrict)])
```

```{r}
unique(jkt_subdistrict[!(jkt_subdistrict %in% vaccine_subdistrict)])
```

Input the common data between the unique values of both df. We should have 9 mismatches. Because the aspatial data includes some of the islands in the dataset too.

```{r}
# initialise a dataframe of our vaccine vs jkt subdistrict spelling
spelling <- data.frame(
  Aspatial_Cases=c("BALE KAMBANG", "HALIM PERDANA KUSUMAH", "JATI PULO", "KAMPUNG TENGAH", "KRAMAT JATI", "KERENDANG", "PAL MERIAM", "PINANG RANTI", "RAWA JATI"),
  Geospatial_BD=c("BALEKAMBANG", "HALIM PERDANA KUSUMA", "JATIPULO", "TENGAH", "KRAMATJATI", "KRENDANG", "PALMERIAM", "PINANGRANTI", "RAWAJATI")
  )

# with dataframe a input, outputs a kable
library(knitr)
library(kableExtra)
kable(spelling, caption="Mismatched Records") %>%
  kable_material("hover", latex_options="scale_down")
```

## Correcting Mismatched Sub-District Records

Now that we know which sub-district records are mismatched, we need to rectify the mismatches by renaming them: (9 mismatches)

```{r}
# where jkt is a mismatched value, replace with the correct value
jkt$Sub_District[jkt$Sub_District == 'BALEKAMBANG'] <- 'BALE KAMBANG'

jkt$Sub_District[jkt$Sub_District == 'HALIM PERDANA KUSUMA'] <- 'HALIM PERDANA KUSUMAH'

jkt$Sub_District[jkt$Sub_District == 'JATIPULO'] <- 'JATI PULO'

jkt$Sub_District[jkt$Sub_District == 'TENGAH'] <- 'KAMPUNG TENGAH'

jkt$Sub_District[jkt$Sub_District == 'KRAMATJATI'] <- 'KRAMAT JATI'

jkt$Sub_District[jkt$Sub_District == 'KRENDANG'] <- 'KERENDANG'

jkt$Sub_District[jkt$Sub_District == 'PALMERIAM'] <- 'PAL MERIAM'

jkt$Sub_District[jkt$Sub_District == 'PINANGRANTI'] <- 'PINANG RANTI'

jkt$Sub_District[jkt$Sub_District == 'RAWAJATI'] <- 'RAWA JATI'
```

## Remove the islands from aspatial data

```{r}
vaccine_jkt = filter(vaccine_jkt, !(Sub_District %in% c("PULAU HARAPAN", "PULAU KELAPA", "PULAU PANGGANG", "PULAU PARI", "PULAU TIDUNG", "PULAU UNTUNG JAWA")))
```

## Joining + EDA

Now, we have a standardised common identifier among our geospatial and aspatial dataframes. Let's join them once more:

```{r}
# joins vaccine_jkt to jkt based on Sub_District
combined_jkt<- left_join(jkt, vaccine_jkt,
                              by=c("Sub_District"="Sub_District")
                              )
```

Now, let's visualise our current combined_jkt in terms of vaccination rates again:

```{r}
# maps the monthly vaccination rates


vaccinated = tm_shape(combined_jkt)+
  tm_fill("Vaccinated") +
  tm_borders(alpha = 0.5) +
  tm_layout(main.title="Vaccination Rate July2021")
vaccinated
```

## Calculations

Before we move into into EDA and thematic mapping, we need to calculate the cumulative vaccination cases rate \### CUMULATIVE CONFIRMED VACCINATION RATE

The cumulative vaccination rate can be calculated by taking the vaccinated (based on the name of the sub-district and the date), then dividing by 100.

```{r}
# grouping based on the sub-district and date
# the cumulative_case_rate is based on the sum of cases over the total population
vaccination_rate <- vaccine_jkt %>%
  inner_join(jkt, by=c("Sub_District" = "Sub_District")) %>%
  group_by(Sub_District, Date) %>%
  dplyr::summarise(`vaccination_rate` = ((sum(Vaccinated)/(Total_Population))*100)) %>%
  
  #afterwards, pivots the table based on the Dates, using the cumulative case rate as the values
  ungroup() %>% pivot_wider(names_from = Date,
              values_from = vaccination_rate)
```

```{r}
print(as_tibble(vaccination_rate))
```

## Converting dataframes to sf objects

Before we move on into the mapping, we should convert these dataframes into sf objects.

```{r}
combined_jkt <- st_as_sf(combined_jkt)

# need to join our previous dataframes with the geospatial data to ensure that geometry column is present
vaccination_rate <- vaccination_rate%>% left_join(jkt, by=c("Sub_District"="Sub_District"))
vaccination_rate <- st_as_sf(vaccination_rate)
```

# Mapping: Monthly Cumulative Cases Rate

## Jenks Choropleth Map

Now I will be trying to see the suitability of using Jenks Choropleth Map. It 'seeks to minimize the average deviation from the class mean while maximizing the deviation from the means of the other groups' (source) and tends to identify real, natural classes within the data. However, jenks will not work as well if the data has a low variance, so let's check the variance:

```{r}
var(vaccination_rate$`2021-07-01`)
```

```{r}
# var(vaccination_rate$`2021-07-01`)
# var(vaccination_rate$`2021-08-01`)
# var(vaccination_rate$`2021-09-01`)
# var(vaccination_rate$`2021-10-01`)
# var(vaccination_rate$`2021-11-01`)
# var(vaccination_rate$`2021-12-01`)
# var(vaccination_rate$`2022-01-01`)
# var(vaccination_rate$`2022-02-01`)
# var(vaccination_rate$`2022-03-02`)
# var(vaccination_rate$`2022-04-01`)
# var(vaccination_rate$`2022-05-01`)
 var(vaccination_rate$`2022-06-01`)
```

We can continue using the Jenks categorization since the variance is increasing overtime and appears to be significant. Following some testing, six classes appear to be the optimal: too few classes make it difficult to perceive any differentiation between the gradients, while too many classes make it difficult for us to distinguish between them.

```{r}
# using the jenks method, with 6 classes
tmap_mode("plot")
tm_shape(vaccination_rate)+
  tm_fill("2021-07-01", 
          n= 6,
          style = "jenks", 
          title = "Vaccination Rate") +
  tm_layout(main.title = "Vaccination Rate July 2021",
            main.title.position = "center",
            main.title.size = 1,
            legend.height = 0.5, 
            legend.width = 0.4,
            frame = TRUE) +
  tm_borders(alpha = 0.5)
```

We should plot it for all the months - so let's have a helper function for plotting this!

```{r}
# input: the dataframe and the variable name - in this case, the month 
# with style="jenks" for the jenks classification method
jenks_plot <- function(df, varname) {
  tm_shape(vaccination_rate) +
    tm_polygons() +
  tm_shape(df) +
    tm_fill(varname, 
          n= 6,
          style = "jenks", 
          title = "Vaccination Rate") +
    tm_layout(main.title = varname,
          main.title.position = "center",
          main.title.size = 1.2,
          legend.height = 0.35, 
          legend.width = 0.25,
          frame = TRUE) +
    tm_borders(alpha = 0.5)
}
```

## Choropleth Mapping

Now the visualisation the jenks plots for all months:

::: panel-tabset
### Yr 2021

Jul & Aug 2021

```{r}
#| code-fold: true
#| code-summary: "Show the code"
# split it up into multiple arranges to make it easier to see
library(tmap)
tmap_mode("plot")
jul2021 = jenks_plot(vaccination_rate, "2021-07-01")
aug2021 = jenks_plot(vaccination_rate, "2021-08-01")
tmap_arrange(jul2021, aug2021, asp=1, ncol=2)
```

Sept & Oct 2021

```{r}
#| code-fold: true
#| code-summary: "Show the code"
library(tmap)
tmap_mode("plot")
sept2021 = jenks_plot(vaccination_rate, "2021-09-01")
oct2021 = jenks_plot(vaccination_rate, "2021-10-01")
tmap_arrange(sept2021, oct2021, asp=1, ncol=2)
```

Nov & Dec 2021

```{r}
#| code-fold: true
#| code-summary: "Show the code"
library(tmap)
tmap_mode("plot")
nov2021 = jenks_plot(vaccination_rate, "2021-11-01")
dec2021 = jenks_plot(vaccination_rate, "2021-12-01")
tmap_arrange(nov2021, dec2021, asp=1, ncol=2)
```

### Yr 2022

Jan & Feb 2022

```{r}
#| code-fold: true
#| code-summary: "Show the code"
library(tmap)
tmap_mode("plot")
jan2021 = jenks_plot(vaccination_rate, "2022-01-01")
feb2021 = jenks_plot(vaccination_rate, "2022-02-01")
tmap_arrange(jan2021, feb2021, asp=1, ncol=2)
```

Mar & Apr 2022

```{r}
#| code-fold: true
#| code-summary: "Show the code"
library(tmap)
tmap_mode("plot")
mar2021 = jenks_plot(vaccination_rate, "2022-03-02")
apr2021 = jenks_plot(vaccination_rate, "2022-04-01")
tmap_arrange(mar2021, apr2021, asp=1, ncol=2)
```

May & Jun 2022

```{r}
#| code-fold: true
#| code-summary: "Show the code"
library(tmap)
tmap_mode("plot")
may2021 = jenks_plot(vaccination_rate, "2022-05-01")
jun2021 = jenks_plot(vaccination_rate, "2022-06-01")
tmap_arrange(may2021, jun2021, asp=1, ncol=2)
```
:::

### View highest vaccination rate

Check for darkest sub-district in early stages

::: panel-tabset
### Yr 2021

```{r}
vaccination_rate$Village[which.max(vaccination_rate$`2021-07-01`)]
```

```{r}
vaccination_rate$Village[which.max(vaccination_rate$`2021-08-01`)]
```

```{r}
vaccination_rate$Village[which.max(vaccination_rate$`2021-09-01`)]
```

```{r}
vaccination_rate$Village[which.max(vaccination_rate$`2021-10-01`)]
```

```{r}
vaccination_rate$Village[which.max(vaccination_rate$`2021-11-01`)]
```

```{r}
vaccination_rate$Village[which.max(vaccination_rate$`2021-12-01`)]
```

### Yr 2022

To check for darkest sub-district in the later stages

```{r}
vaccination_rate$Village[which.max(vaccination_rate$`2022-01-01`)]
```

```{r}
vaccination_rate$Village[which.max(vaccination_rate$`2022-06-01`)]
```
:::

### Observations from Jenks Choropleth Map

Note: The ranges will slowly grow larger over time with greater influx of cases. Some observations made from these maps:

-   (July 2021 to Aug 2021) - there is a visible increase of vaccination rate like 2 times increase, referencing to the legend. As shown above, the highest darkest shade is in KELAPA GADING TIMUR where it is likely that more people are willing to take the vaccination.

-   (Nov 2021 to Dec 2021) - the increase of vaccination rate starts to slow down slightly but still increasing. There is a noticeable darkening of gradient across majority of the map as we transition from Oct 2021 to Nov 2021, the increase is noticably significant.

-   (Jan 2022 to Mar 2022) - from march 2022, the rate of vaccination rate increase even lesser which is probably due to large populations already vaccinated and hence only the minority still going for vaccination.

-   There are signs of cluster around the South region area where certain areas still remain light shade gradient, which might due to the missing sub-district vaccination data.

# Hot Spot and Cold Spot Area Analysis (HCSA)

HCSA uses spatial weights to identify locations of statistically significant hot spots and cold spots in an spatially weighted attribute that are in proximity to one another based on a calculated distance. The analysis groups features when similar high (hot) or low (cold) values are found in a cluster. The polygon features usually represent administration boundaries or a custom grid structure.

## Computing local Gi\* statistics

```{r}
wm_idw <- vaccination_rate %>%
  mutate(nb = st_contiguity(geometry),
         wts = st_inverse_distance(nb, geometry,
                                   scale = 1,
                                   alpha = 1),
         .before = 1)
```

::: panel-tabset
### Yr2021

#### July 2021

```{r}
#| code-fold: true
#| code-summary: "Show the code"
HCSA_jul2021 <- wm_idw %>% 
  mutate(local_Gi = local_gstar_perm(
    wm_idw$`2021-07-01`, nb, wt, nsim = 99),
         .before = 1) %>%
  unnest(local_Gi)

tmap_mode("plot")
map1 <- tm_shape(HCSA_jul2021) +
  tm_fill("gi_star") + 
  tm_borders(alpha = 0.5) +
  tm_view(set.zoom.limits = c(6,8)) +
  tm_layout(main.title = "Gi* of Vaccination Rate",
            main.title.size = 0.8)

map2 <- tm_shape(HCSA_jul2021) +
  tm_fill("p_value",
          breaks = c(0, 0.001, 0.01, 0.05, 1),
              labels = c("0.001", "0.01", "0.05", "Not sig")) + 
  tm_borders(alpha = 0.5) +
  tm_layout(main.title = "p-value of Gi*",
            main.title.size = 0.8)

tmap_arrange(map1, map2, ncol = 2)
```

#### Aug 2021

```{r}
#| code-fold: true
#| code-summary: "Show the code"
HCSA_aug2021 <- wm_idw %>% 
  mutate(local_Gi = local_gstar_perm(
    wm_idw$`2021-08-01`, nb, wt, nsim = 99),
         .before = 1) %>%
  unnest(local_Gi)

tmap_mode("plot")
map3 <- tm_shape(HCSA_aug2021) +
  tm_fill("gi_star") + 
  tm_borders(alpha = 0.5) +
  tm_view(set.zoom.limits = c(6,8)) +
  tm_layout(main.title = "Gi* of Vaccination Rate",
            main.title.size = 0.8)

map4 <- tm_shape(HCSA_aug2021) +
  tm_fill("p_value",
          breaks = c(0, 0.001, 0.01, 0.05, 1),
              labels = c("0.001", "0.01", "0.05", "Not sig")) + 
  tm_borders(alpha = 0.5) +
  tm_layout(main.title = "p-value of Gi*",
            main.title.size = 0.8)

tmap_arrange(map3, map4, ncol = 2)
```

#### Sept 2021

```{r}
#| code-fold: true
#| code-summary: "Show the code"
HCSA_sept2021 <- wm_idw %>% 
  mutate(local_Gi = local_gstar_perm(
    wm_idw$`2021-09-01`, nb, wt, nsim = 99),
         .before = 1) %>%
  unnest(local_Gi)

tmap_mode("plot")
map5 <- tm_shape(HCSA_sept2021) +
  tm_fill("gi_star") + 
  tm_borders(alpha = 0.5) +
  tm_view(set.zoom.limits = c(6,8)) +
  tm_layout(main.title = "Gi* of Vaccination Rate",
            main.title.size = 0.8)

map6 <- tm_shape(HCSA_sept2021) +
  tm_fill("p_value",
          breaks = c(0, 0.001, 0.01, 0.05, 1),
              labels = c("0.001", "0.01", "0.05", "Not sig")) + 
  tm_borders(alpha = 0.5) +
  tm_layout(main.title = "p-value of Gi*",
            main.title.size = 0.8)

tmap_arrange(map5, map6, ncol = 2)
```

#### Oct 2021

```{r}
#| code-fold: true
#| code-summary: "Show the code"
HCSA_oct2021 <- wm_idw %>% 
  mutate(local_Gi = local_gstar_perm(
    wm_idw$`2021-10-01`, nb, wt, nsim = 99),
         .before = 1) %>%
  unnest(local_Gi)

tmap_mode("plot")
map7 <- tm_shape(HCSA_oct2021) +
  tm_fill("gi_star") + 
  tm_borders(alpha = 0.5) +
  tm_view(set.zoom.limits = c(6,8)) +
  tm_layout(main.title = "Gi* of Vaccination Rate",
            main.title.size = 0.8)

map8 <- tm_shape(HCSA_oct2021) +
  tm_fill("p_value",
          breaks = c(0, 0.001, 0.01, 0.05, 1),
              labels = c("0.001", "0.01", "0.05", "Not sig")) + 
  tm_borders(alpha = 0.5) +
  tm_layout(main.title = "p-value of Gi*",
            main.title.size = 0.8)

tmap_arrange(map7, map8, ncol = 2)
```

#### Nov 2021

```{r}
#| code-fold: true
#| code-summary: "Show the code"
HCSA_nov2021 <- wm_idw %>% 
  mutate(local_Gi = local_gstar_perm(
    wm_idw$`2021-11-01`, nb, wt, nsim = 99),
         .before = 1) %>%
  unnest(local_Gi)

tmap_mode("plot")
map9 <- tm_shape(HCSA_nov2021) +
  tm_fill("gi_star") + 
  tm_borders(alpha = 0.5) +
  tm_view(set.zoom.limits = c(6,8)) +
  tm_layout(main.title = "Gi* of Vaccination Rate",
            main.title.size = 0.8)

map10 <- tm_shape(HCSA_nov2021) +
  tm_fill("p_value",
          breaks = c(0, 0.001, 0.01, 0.05, 1),
              labels = c("0.001", "0.01", "0.05", "Not sig")) + 
  tm_borders(alpha = 0.5) +
  tm_layout(main.title = "p-value of Gi*",
            main.title.size = 0.8)

tmap_arrange(map9, map10, ncol = 2)
```

#### Dec 2021

```{r}
#| code-fold: true
#| code-summary: "Show the code"
HCSA_dec2021 <- wm_idw %>% 
  mutate(local_Gi = local_gstar_perm(
    wm_idw$`2021-12-01`, nb, wt, nsim = 99),
         .before = 1) %>%
  unnest(local_Gi)

tmap_mode("plot")
map11 <- tm_shape(HCSA_dec2021) +
  tm_fill("gi_star") + 
  tm_borders(alpha = 0.5) +
  tm_view(set.zoom.limits = c(6,8)) +
  tm_layout(main.title = "Gi* of Vaccination Rate",
            main.title.size = 0.8)

map12 <- tm_shape(HCSA_dec2021) +
  tm_fill("p_value",
          breaks = c(0, 0.001, 0.01, 0.05, 1),
              labels = c("0.001", "0.01", "0.05", "Not sig")) + 
  tm_borders(alpha = 0.5) +
  tm_layout(main.title = "p-value of Gi*",
            main.title.size = 0.8)

tmap_arrange(map11, map12, ncol = 2)
```

### Yr2022

#### Jan 2022

```{r}
#| code-fold: true
#| code-summary: "Show the code"
HCSA_jan2022 <- wm_idw %>% 
  mutate(local_Gi = local_gstar_perm(
    wm_idw$`2022-01-01`, nb, wt, nsim = 99),
         .before = 1) %>%
  unnest(local_Gi)

tmap_mode("plot")
map13 <- tm_shape(HCSA_jan2022) +
  tm_fill("gi_star") + 
  tm_borders(alpha = 0.5) +
  tm_view(set.zoom.limits = c(6,8)) +
  tm_layout(main.title = "Gi* of Vaccination Rate",
            main.title.size = 0.8)

map14 <- tm_shape(HCSA_jan2022) +
  tm_fill("p_value",
          breaks = c(0, 0.001, 0.01, 0.05, 1),
              labels = c("0.001", "0.01", "0.05", "Not sig")) + 
  tm_borders(alpha = 0.5) +
  tm_layout(main.title = "p-value of Gi*",
            main.title.size = 0.8)

tmap_arrange(map13, map14, ncol = 2)
```

#### Feb 2022

```{r}
#| code-fold: true
#| code-summary: "Show the code"
HCSA_feb2022 <- wm_idw %>% 
  mutate(local_Gi = local_gstar_perm(
    wm_idw$`2022-02-01`, nb, wt, nsim = 99),
         .before = 1) %>%
  unnest(local_Gi)

tmap_mode("plot")
map15 <- tm_shape(HCSA_feb2022) +
  tm_fill("gi_star") + 
  tm_borders(alpha = 0.5) +
  tm_view(set.zoom.limits = c(6,8)) +
  tm_layout(main.title = "Gi* of Vaccination Rate",
            main.title.size = 0.8)

map16 <- tm_shape(HCSA_feb2022) +
  tm_fill("p_value",
          breaks = c(0, 0.001, 0.01, 0.05, 1),
              labels = c("0.001", "0.01", "0.05", "Not sig")) + 
  tm_borders(alpha = 0.5) +
  tm_layout(main.title = "p-value of Gi*",
            main.title.size = 0.8)

tmap_arrange(map15, map16, ncol = 2)
```

#### Mar 2022

```{r}
#| code-fold: true
#| code-summary: "Show the code"
HCSA_mar2022 <- wm_idw %>% 
  mutate(local_Gi = local_gstar_perm(
    wm_idw$`2022-03-02`, nb, wt, nsim = 99),
         .before = 1) %>%
  unnest(local_Gi)

tmap_mode("plot")
map17 <- tm_shape(HCSA_mar2022) +
  tm_fill("gi_star") + 
  tm_borders(alpha = 0.5) +
  tm_view(set.zoom.limits = c(6,8)) +
  tm_layout(main.title = "Gi* of Vaccination Rate",
            main.title.size = 0.8)

map18 <- tm_shape(HCSA_mar2022) +
  tm_fill("p_value",
          breaks = c(0, 0.001, 0.01, 0.05, 1),
              labels = c("0.001", "0.01", "0.05", "Not sig")) + 
  tm_borders(alpha = 0.5) +
  tm_layout(main.title = "p-value of Gi*",
            main.title.size = 0.8)

tmap_arrange(map17, map18, ncol = 2)
```

#### Apr 2022

```{r}
#| code-fold: true
#| code-summary: "Show the code"
HCSA_apr2022 <- wm_idw %>% 
  mutate(local_Gi = local_gstar_perm(
    wm_idw$`2022-04-01`, nb, wt, nsim = 99),
         .before = 1) %>%
  unnest(local_Gi)

tmap_mode("plot")
map19 <- tm_shape(HCSA_apr2022) +
  tm_fill("gi_star") + 
  tm_borders(alpha = 0.5) +
  tm_view(set.zoom.limits = c(6,8)) +
  tm_layout(main.title = "Gi* of Vaccination Rate",
            main.title.size = 0.8)

map20 <- tm_shape(HCSA_apr2022) +
  tm_fill("p_value",
          breaks = c(0, 0.001, 0.01, 0.05, 1),
              labels = c("0.001", "0.01", "0.05", "Not sig")) + 
  tm_borders(alpha = 0.5) +
  tm_layout(main.title = "p-value of Gi*",
            main.title.size = 0.8)

tmap_arrange(map19, map20, ncol = 2)

```

#### May & June 2022

```{r}
#| code-fold: true
#| code-summary: "Show the code"
HCSA_may2022 <- wm_idw %>% 
  mutate(local_Gi = local_gstar_perm(
    wm_idw$`2022-05-01`, nb, wt, nsim = 99),
         .before = 1) %>%
  unnest(local_Gi)

tmap_mode("plot")
map21 <- tm_shape(HCSA_may2022) +
  tm_fill("gi_star") + 
  tm_borders(alpha = 0.5) +
  tm_view(set.zoom.limits = c(6,8)) +
  tm_layout(main.title = "Gi* of Vaccination Rate",
            main.title.size = 0.8)

map22 <- tm_shape(HCSA_may2022) +
  tm_fill("p_value",
          breaks = c(0, 0.001, 0.01, 0.05, 1),
              labels = c("0.001", "0.01", "0.05", "Not sig")) + 
  tm_borders(alpha = 0.5) +
  tm_layout(main.title = "p-value of Gi*",
            main.title.size = 0.8)

tmap_arrange(map21, map22, ncol = 2)
```

#### June 2022

```{r}
#| code-fold: true
#| code-summary: "Show the code"
HCSA_jun2022 <- wm_idw %>% 
  mutate(local_Gi = local_gstar_perm(
    wm_idw$`2022-06-01`, nb, wt, nsim = 99),
         .before = 1) %>%
  unnest(local_Gi)

tmap_mode("plot")
map23 <- tm_shape(HCSA_jun2022) +
  tm_fill("gi_star") + 
  tm_borders(alpha = 0.5) +
  tm_view(set.zoom.limits = c(6,8)) +
  tm_layout(main.title = "Gi* of Vaccination Rate (Jun2022)",
            main.title.size = 0.8)

map24 <- tm_shape(HCSA_jun2022) +
  tm_fill("p_value",
          breaks = c(0, 0.001, 0.01, 0.05, 1),
              labels = c("0.001", "0.01", "0.05", "Not sig")) + 
  tm_borders(alpha = 0.5) +
  tm_layout(main.title = "p-value of Gi* (Jun2022)",
            main.title.size = 0.8)

tmap_arrange(map23, map24, ncol = 2)
```
:::

## Observations

-   In (Jul 2021 to Aug 2021), there are several subtle cold spot clusters in the central and south region as observed from the gi\* maps. And, on the p-value maps, we can easily identified the hot spots clusters and cold spots clusters by comparing the significant clusters in both maps.

-   In (Sept 2021), the clusters starts to move to other parts including the far end of Jakarta towards the North-West area and South-East area.

-   In (Dec 2021 to June 2022), clusters in the south region is still very significant. Old clusters becomes insignificant and new clusters around the north-east region starts to arise. While the central cluster still remains as a prominent hot spot of cluster.

# Spatio-temporal cube

```{r}
vac_rate <- combined_jkt|>
  select('Date', 'Sub_District', 'Total_Population', 'Vaccinated') |>
  mutate(`vaccination_rate` = ((sum(Vaccinated)/(Total_Population))*100)) 

vac_rate
```

## Creating a Time Series Cube

-   Encountered an error ! Number of rows does not equal `n time-periods x n locations` \[1\] FALSE, have tried to re-create another df but unsure how to go abt with it hence only have the code out.

```{r}
time_st <- spacetime(vac_rate, jkt,
                      .loc_col = "Sub-District",
                      .time_col = "Date")
is_spacetime_cube(time_st)
```

## Computing Gi\*

### Deriving the spatial weights

```{r}
# vac_nb <- time_st %>%
#   activate("geometry") %>%
#   mutate(nb = include_self(st_contiguity(geometry)),
#          wt = st_inverse_distance(nb, geometry,
#                                   scale = 1,
#                                   alpha = 1),
#          .before = 1) %>%
#   set_nbs("nb") %>%
#   set_wts("wt")
```

## Computing Gi\*

```{r}
# gi_stars <- vac_nb %>% 
#   group_by(Date) %>% 
#   mutate(gi_star = local_gstar_perm(
#     vaccination_rate, nb, wt)) %>% 
#   tidyr::unnest(gi_star)
```

# Mann-Kendall Test

```{r}
# cbg <- combined_jkt %>% 
#   ungroup() %>% 
#   filter(Sub_District == "KELAPA GADING TIMUR") |> 
#   select(Sub_District, Date, gi_star)
```
