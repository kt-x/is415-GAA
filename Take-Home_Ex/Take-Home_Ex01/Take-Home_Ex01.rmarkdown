---
title: "Take-Home Exercise 1"
date: "30 Jan 2023"
date-modified: "`r Sys.Date()`"
number-sections: true
format: html
execute: 
  echo: true
  eval: true
  warning: false
editor: visual
---


# Overview

## Context

Water is an essential resource for people. The health of people depends on having access to clean water. It ensures peace and security, a clean environment, a sustainable economy, and a reduction in poverty. Yet more than 40% of the world's population lacks access to enough clean water. According to UN-Water, 1.8 billion people will be residing in nations or areas with a severe water shortage by 2025. Water scarcity is a serious threat to several sectors, including food security. Around 70% of the world's freshwater resources are used for agriculture.

## Objectives

Discover the geographical distribution of functional and non-function water points and their co-locations if any in Osun State, Nigeria.


**Exploratory Spatial Data Analysis (ESDA)**

-   Derive kernel density maps of functional and non-functional water points. Using appropriate tmap functions

-   Display the kernel density maps on openstreetmap of Osub State, Nigeria.

-   Describe the spatial patterns revealed by the kernel density maps. Highlight the advantage of kernel density map over point map.

**Second-order Spatial Point Patterns Analysis**

With reference to the spatial point patterns observed in ESDA:

-   Formulate the null hypothesis and alternative hypothesis and select the confidence level.

-   Perform the test by using appropriate Second order spatial point patterns analysis technique.

-   With reference to the analysis results, draw statistical conclusions.

**Spatial Correlation Analysis**

-   Investigate if the spatial distribution of functional and non-functional water points are independent from each other.

-   Formulate the null hypothesis and alternative hypothesis and select the confidence level.

-   Perform the test by using appropriate Second order spatial point patterns analysis technique. With reference to the analysis results, draw statistical conclusions.

## Data

| Type       | Name          | Format | Description                   | Source                        |
|---------------|---------------|---------------|---------------|---------------|
| Aspatial   | WPdx+         | csv    | Locations of water points     | WPdx Global Data Repositories |
| Geospatial | geoBoundaries | SHP    | geoBoundaries data of Nigeria | geoBoundaries                 |

: Table 1: Data used

# Importing and loading packages

For this exercise, we'll be using the following packages:

-   sf: Manage and process vector-based geospatial data in R

-   spatstat: Perform 1st & 2nd spatial point patterns analysis + kernel density

-   raster: Reads, writes, manipulates, analyses, model of grid spatial data convert image output generate by spatstat into raster format

-   maptools: Convert Spatial objects into ppp format of spatstat

-   tmap: Plotting cartographic quality static point patterns maps or interactive maps by using leaflet API

-   tidyverse: a collection of functions, data, and documentation that extends the capabilities of base R.

-   funModeling: Plot charts for easier interpretations

We will be using p_load function of pacman package to install and load required packages.


```{r}
pacman::p_load(maptools, sf, raster, spatstat, tmap, tidyverse, funModeling)
```


------------------------------------------------------------------------

# Spatial Data Wrangling

## Data Geospatial

::: panel-tabset
#### 1. Import NGA

We will be using st_read function to read our geospatial data.


```{r}
NGA <- st_read(dsn = "data/geospatial/", 
               layer = "nga_admbnda_adm2_osgof_20190417")%>%
  
st_transform(crs = 26392)

```


#### 2. Select & Filter specific fields

Lets start by selecting specific fields that will be helpful in this exercise and select Osun state using the filter() function.


```{r}
NGA <- NGA %>%
  select(c(3:4, 8:9)) %>%
  filter(ADM1_EN == "Osun")
```



#### 3. Glimpse NGA


```{r}
glimpse(NGA)
```


:::


## Importing WPdx

We will be using read_csv() function to read the WPdx file and using filter function to only show Nigeria country data and only for Osun state.


```{r}
wp_nga <- read_csv("data/aspatial/WPdx.csv") %>%
  filter(`#clean_country_name` == "Nigeria") %>%
  filter(`#clean_adm1` == "Osun")
```


### Convert water point data into sf point features


```{r}
wp_nga$Geometry = st_as_sfc(wp_nga$`New Georeferenced Column`)
wp_nga
```


### Convert this df into sf object


```{r}
wp_sf <- st_sf(wp_nga, crs=4326)
wp_sf
```


### Transforming into Nigeria projected coordinate system


```{r}
wp_sf <- wp_sf %>%
  st_transform(crs = 26392)
```



### EDA for Water Point Data

::: panel-tabset
#### 1. Overview
Next, we want to first have a visual of the water point data by creating a frequency chart. (Reference to In-class exercise 2)


```{r}
freq(data = wp_sf,
     input = '#status_clean')
```


#### 2. Rename to wp_sf_nga

Seems like there are several different categories of water points. With reference to Objectives, we will be focusing on Functional and Non-Functional while still taking into account of the unknown water points. But first, let's rename this spatial frame.


```{r}
wp_sf_nga <- wp_sf %>% 
  rename(status_clean = '#status_clean') %>%
  select(status_clean) %>%
  mutate(status_clean = replace_na(
    status_clean, "unknown"))
```


#### 3. Functional wp

After that, we filter and assign the wp_functional


```{r}
wp_functional <- wp_sf_nga %>%
  filter(status_clean %in%
           c("Functional",
             "Functional but not in use",
             "Functional but needs repair"))
freq(data = wp_functional,
     input = 'status_clean')
```


#### 4. Non-Functional wp

Sames goes for the Non-Functional


```{r}
wp_nonfunctional <- wp_sf_nga %>%
  filter(status_clean %in%
           c("Abandoned/Decommissioned",
             "Abandoned",
             "Non-Functional due to dry season",
             "Non-Functional",
             "Non functional due to dry season"))
freq(data = wp_nonfunctional,
     input = 'status_clean')
```


#### 5. Unknown wp

Sames goes for the Unknown


```{r}
wp_unknown <- wp_sf_nga %>%
  filter(status_clean == "unknown")

freq(data = wp_unknown,
     input = 'status_clean')

```

:::

### Performing Point-in-Polygon Count

Next, we want to find out the number of total, functional, nonfunctional and unknown water points in each LGA. First, it identifies the functional water points in each LGA by using st_intersects() of sf package. Next, length() is used to calculate the number of functional water points that fall inside each LGA.


```{r}
NGA_wp <- NGA %>% 
  mutate(`total_wp` = lengths(
    st_intersects(NGA, wp_sf_nga))) %>%
  mutate(`wp_functional` = lengths(
    st_intersects(NGA, wp_functional))) %>%
  mutate(`wp_nonfunctional` = lengths(
    st_intersects(NGA, wp_nonfunctional))) %>%
  mutate(`wp_unknown` = lengths(
    st_intersects(NGA, wp_unknown)))
```




------------------------------------------------------------------------

# Geospatial Data wrangling

Moving to data wrangling on geospatial data, first, we need to convert simple feature data frame to sp spatial class.

## Converting sf data frames to sp's Spatial\* class

::: panel-tabset
### 1. Code

Convert to sp object/class using as_Spatial(). Take a look at the following 2 tabs (wp_sc, NGA_sc), notice the properties is "SpatialPolygonsDataFrame".


```{r}
wp_sc_functional <- as_Spatial(wp_functional)
wp_sc_nonfunctional <- as_Spatial(wp_nonfunctional)
NGA_sc <- as_Spatial(NGA)
```


### 2. wp_sc


```{r}
wp_sc_functional
wp_sc_nonfunctional
```


### 3. NGA_sc


```{r}
NGA_sc
```

:::

## Converting the Spatial\* class into generic sp format

WHY? Because spatstat requires the analytical data in ppp object form. There is no direct way to convert a Spatial\* classes into ppp object. We need to convert the Spatial classes\* into Spatial object first.

::: panel-tabset
#### Code

Starting with Converting the Spatial\* classes into generic sp objects. Take a look at the following 2 tabs (wp_sc, NGA_sc), notice the properties is "SpatialPoints" and "SpatialPolygons" respectively.


```{r}
#wp_sp <- as(wp_sc, "SpatialPoints")
wp_sp_functional <- as(wp_sc_functional, "SpatialPoints")
wp_sp_nonfunctional <- as(wp_sc_nonfunctional, "SpatialPoints")
nga_sp <- as(NGA_sc, "SpatialPolygons")
```


#### wp_sp


```{r}
#wp_sp
wp_sp_functional
wp_sp_nonfunctional
```


#### nga_sp


```{r}
nga_sp
```

:::

## Converting the generic sp format into spatstat's ppp format

Next, we will use as.ppp() function of spatstat to convert the spatial data into spatstat's ppp object format.

::: panel-tabset
#### Code


```{r}
#wp_ppp <- as(wp_sp, "ppp")
wp_ppp_functional <- as(wp_sp_functional, "ppp")
wp_ppp_nonfunctional <- as(wp_sp_nonfunctional, "ppp")

#wp_ppp
wp_ppp_functional
wp_ppp_nonfunctional
```


#### Plot


```{r}
#plot(wp_ppp)

par(mfrow=c(1,2))
plot(wp_ppp_functional)
plot(wp_ppp_nonfunctional)
```


:::

### Check for duplicates

::: panel-tabset
#### T / F value

```{r}
#any(duplicated(wp_ppp))

any(duplicated(wp_ppp_functional))
any(duplicated(wp_ppp_nonfunctional))
```


#### Sum of duplicates
If so, check for the number of duplicates


```{r}

sum(multiplicity(wp_ppp_functional) > 1)
sum(multiplicity(wp_ppp_nonfunctional) > 1)
```


#### Jittery Approach
To resolve this problem, we will be using the jittering approach, which will add a small perturbation to the duplicate points so that they do not occupy the exact same space.


```{r}
#wp_ppp_jit <- rjitter(wp_ppp, 
#                      retry=TRUE,
#                      nsim=1, 
#                      drop=TRUE)

wp_ppp_functional_jit <- rjitter(wp_ppp_functional, 
                      retry=TRUE,
                      nsim=1, 
                      drop=TRUE)
wp_ppp_nonfunctional_jit <- rjitter(wp_ppp_nonfunctional, 
                      retry=TRUE,
                      nsim=1, 
                      drop=TRUE)
```


Then, check again for duplicates


```{r}
any(duplicated(wp_ppp_functional_jit))
any(duplicated(wp_ppp_nonfunctional_jit))
```


:::


## Create owin object

owin object is designed to represent this polygonal region. We will be using to convert nigeria Spatial Polygon object into owin object of spatstat.

::: panel-tabset
### Code


```{r}
nga_owin <- as(nga_sp, "owin")
```


### Plot


```{r}
plot(nga_owin)
```


### Summary


```{r}
summary(nga_owin)
```

:::

### Combining point events object and owin object

::: panel-tabset
#### Code


```{r}
#wpNGA_ppp = wp_ppp[nga_owin]

wpNGA_ppp_functional = wp_ppp_functional[nga_owin]
wpNGA_ppp_nonfunctional= wp_ppp_nonfunctional[nga_owin]
```


#### Plot

```{r}
#plot(wpNGA_ppp)

par(mfrow=c(1,2))
plot(wpNGA_ppp_functional)
plot(wpNGA_ppp_nonfunctional)
```



:::


### tmap plots
We can further plot our water points (functional & non-functional) using tmap().


::: panel-tabset
#### Overview
Lets put both functional and non functional water points together. Also, Set the base map to be "OpenStreetMap". 

```{r}
tmap_mode("view")
tm_basemap("OpenStreetMap") +
tm_shape(NGA_wp) + 
  tm_polygons() + 
tm_shape(wp_functional) + 
  tm_dots(col = "status_clean", 
          size = 0.01, 
          border.col = "black", 
          border.lwd = 0.5) +
tm_shape(wp_nonfunctional) + 
  tm_dots(col = "status_clean", 
          size = 0.01, 
          border.col = "black", 
          border.lwd = 0.5) +
  tm_view(set.zoom.limits = c(8, 16))
```



From this point map, even with the different colours points, it is difficult to intrepet the clusters of the functional and non-functional water points. Lets go to the next tab to look at only functional points. 

#### wp_functional

```{r}
tmap_mode("view")
tm_basemap("OpenStreetMap") +
tm_shape(NGA_wp) + 
  tm_polygons() + 
tm_shape(wp_functional) + 
  tm_dots(col = "status_clean", 
          size = 0.01, 
          border.col = "black", 
          border.lwd = 0.5) +
  tm_view(set.zoom.limits = c(8, 16))
```



At a macro view (zoom out), there are A LOT of functional water points. While zooming in, it looks like there's some clusters of water points such as the border between Ife Central and Ife East. Lets take a look at the next tab, wp_nonfunctional.


#### wp_nonfunctional

```{r}
tmap_mode("view")
tm_basemap("OpenStreetMap") +
tm_shape(NGA_wp) + 
  tm_polygons() + 
tm_shape(wp_nonfunctional) + 
  tm_dots(col = "status_clean", 
          size = 0.01, 
          border.col = "black", 
          border.lwd = 0.5) +
  tm_view(set.zoom.limits = c(8, 16))
```


Again, at a macro view (zoom out), there are A LOT of functional water points. While zooming in, it looks like there's some clusters of water points such as the border between Ife Central and Ife East, which seems like the same cluster as shown in wp_functional. This highlights that point map might not suitable in identifying the clusters due to the overlapping points and categorisation. Thus, lets proceed onto the First-Order of Spatial Point Patterns Analysis to plot Kernel density maps which could provide more meaningful insights.

:::


------------------------------------------------------------------------

# First-order Spatial Point Patterns Analysis
Now that we have the point maps from the previous section, moving forward, lets see how would the kernel density maps would display the water points in Osun. 


## Kernel Density Estimation

In this section, We will be computing Functional and Non-Functional water points in Osun. 


### Computing kernel density estimation using automatic bandwidth selection method

We will be using the bw.diggle() method than bw.ppl() because it is more suitable for this exercise to detect single tight cluster in the midst of random noise which was observed earlier section in the point maps, theres seem to be clusters, for example, along the border between Ife Central and Ife East.


```{r}
kde_wpNGA_functional.bw <- density(wpNGA_ppp_functional,
                          sigma=bw.diggle,
                          edge=TRUE,
                          kernel="gaussian") 

kde_wpNGA_nonfunctional.bw <- density(wpNGA_ppp_nonfunctional,
                          sigma=bw.diggle,
                          edge=TRUE,
                          kernel="gaussian") 

par(mfrow=c(1,2))
plot(kde_wpNGA_functional.bw)
plot(kde_wpNGA_nonfunctional.bw)
```


It looks the unit of measurement is of the default value in meter. That's why the density values computed is in "number of points per square meter".

Before moving to the next section, let's retrieve the bandwidth used to compute the KDE layer.

::: panel-tabset
#### bw_functional

```{r}
#bw <- bw.diggle(wpNGA_ppp)
#bw
bw_functional <- bw.diggle(wpNGA_ppp_functional)
bw_functional
```

```{r}
bw_nonfunctional <- bw.diggle(wpNGA_ppp_nonfunctional)
bw_nonfunctional
```



:::

### Rescalling KDE values


```{r}
wpNGA_ppp_functional.km <- rescale(wpNGA_ppp_functional, 1000, "km")
wpNGA_ppp_nonfunctional.km <- rescale(wpNGA_ppp_nonfunctional, 1000, "km")
```

```{r}
#kde_wpNGA.bw <- density(wpNGA_ppp.km, sigma=bw.diggle, edge=TRUE, #kernel="gaussian")
#plot(kde_wpNGA.bw)


kde_wpNGA_functional.bw <- density(wpNGA_ppp_functional.km,
                          sigma=bw.diggle,
                          edge=TRUE,
                          kernel="gaussian") 

kde_wpNGA_nonfunctional.bw <- density(wpNGA_ppp_nonfunctional.km,
                          sigma=bw.diggle,
                          edge=TRUE,
                          kernel="gaussian") 

par(mfrow=c(1,2))
plot(kde_wpNGA_functional.bw)
plot(kde_wpNGA_nonfunctional.bw)
```


Unlike the point map, from the above KDE maps, it highlight the signifcant clusters and much easier to identify the clusters of functional and non-functional water points clusters. 


## Adaptive KDE

### Computing KDE by using adaptive bandwidth

Fixed bandwidth method is very sensitive to highly skew distribution of spatial point patterns over geographical units for example urban versus rural. Hence, for this exercise, we will be using adaptive bandwidth instead.

::: panel-tabset
#### kde_wpNGA_functional_adaptive
Lets look at functional wp in adaptive bandwidth then move on the next tab for the non-functional.

```{r}
#kde_wpNGA_adaptive <- adaptive.density(wpNGA_ppp.km, method="kernel")
#plot(kde_wpNGA_adaptive)

par(mfrow=c(1,2))

kde_wpNGA_functional_adaptive <- adaptive.density(wpNGA_ppp_functional.km, method="kernel")
plot(kde_wpNGA_functional_adaptive)
plot(kde_wpNGA_functional.bw)

```


#### kde_wpNGA_nonfunctional_adaptive

```{r}
kde_wpNGA_nonfunctional_adaptive <- adaptive.density(wpNGA_ppp_nonfunctional.km, method="kernel")
plot(kde_wpNGA_nonfunctional_adaptive)

plot(kde_wpNGA_nonfunctional.bw)
```



OBSERVATION
Well it seems like theres isnt signficant changes to the functional BUT if u take a closer look at the non-functional map, some points are now lower in density with this adaptive bandwidth.
:::


### Converting KDE output into grid object

To make the KDE output is suitable for mapping purposes.


```{r}
#gridded_kde_wpNGA_bw <- as.SpatialGridDataFrame.im(kde_wpNGA.bw)
#spplot(gridded_kde_wpNGA_bw)

gridded_kde_wpNGA_func_bw <- as.SpatialGridDataFrame.im(kde_wpNGA_functional.bw)

gridded_kde_wpNGA_nfunc_bw <- as.SpatialGridDataFrame.im(kde_wpNGA_nonfunctional.bw)

par(mfrow=c(1,2))
spplot(gridded_kde_wpNGA_func_bw)
spplot(gridded_kde_wpNGA_nfunc_bw)
```


#### Converting gridded output into raster

Next, we will convert the gridded kernal density objects into RasterLayer object by using raster() of raster package.

::: panel-tabset
##### 1. Convert


```{r}
#kde_wpNGA_bw_raster <- raster(gridded_kde_wpNGA_bw)
#kde_wpNGA_bw_raster

kde_wpNGA_func_bw_raster <- raster(gridded_kde_wpNGA_func_bw)
kde_wpNGA_func_bw_raster
kde_wpNGA_nfunc_bw_raster <- raster(gridded_kde_wpNGA_nfunc_bw)
kde_wpNGA_nfunc_bw_raster
```


##### 2. Assigning projection systems

WHY? - crs property is NA during the convert


```{r}
#projection(kde_wpNGA_bw_raster) <- CRS("+init=EPSG:3414")
#kde_wpNGA_bw_raster

projection(kde_wpNGA_func_bw_raster) <- CRS("+init=EPSG:3414")
kde_wpNGA_func_bw_raster
projection(kde_wpNGA_nfunc_bw_raster) <- CRS("+init=EPSG:3414")
kde_wpNGA_nfunc_bw_raster
```


##### 3. tmap (functional)

Lets display the raster in cartographic quality map using tmap package.


```{r}
tm_shape(kde_wpNGA_func_bw_raster) + 
  tm_raster("v") +
  tm_layout(legend.position = c("right", "bottom"), frame = FALSE)
  tm_view(set.zoom.limits = c(8, 16))

```


##### 4. tmap (non-functional)

```{r}
tm_shape(kde_wpNGA_nfunc_bw_raster) + 
  tm_raster("v") +
  tm_layout(legend.position = c("right", "bottom"), frame = FALSE)
  tm_view(set.zoom.limits = c(8, 16))
```


:::



### Spatial Point Patterns using KDE

#### Extract Osun

In this section, we will be comparing KDE of water points at Osun as the study area.


```{r}
#osun = NGA_sc[wp_sc$clean_adm1 == "Osun",]
osun = NGA_sc

plot(osun, main = "Osun")
```


#### Converting the spatial point data frame into generic sp format


```{r}
osun_sp = as(osun, "SpatialPolygons")
```


#### Creating owin object


```{r}
osun_owin = as(osun_sp, "owin")
```


#### Combining wp points and Osun (Study Area)


```{r}
wp_osun_ppp_func = wp_ppp_functional_jit[osun_owin]
wp_osun_ppp_nfunc = wp_ppp_nonfunctional_jit[osun_owin]
```


Next, rescale() function is used to trasnform the unit of measurement from metre to kilometre.


```{r}
wp_osun_ppp_func.km = rescale(wp_osun_ppp_func, 1000, "km")
wp_osun_ppp_nfunc.km = rescale(wp_osun_ppp_nfunc, 1000, "km")
```


After that, we do the plotting


```{r}
par(mfrow=c(1,2))
plot(wp_osun_ppp_func.km, main="Osun Functional")
plot(wp_osun_ppp_nfunc.km, main="Osun Non-Functional")
```


#### Computing KDE

The code chunk below will be used to compute the KDE of these four planning area. bw.diggle method is used to derive the bandwidth of each


```{r}
par(mfrow=c(1,2))
plot(density(wp_osun_ppp_func.km,
             sigma=bw.diggle, 
             edge=TRUE, 
             kernel="gaussian"),
     main="Osun Functional")

plot(density(wp_osun_ppp_nfunc.km,
             sigma=bw.diggle, 
             edge=TRUE, 
             kernel="gaussian"),
     main="Osun Non-Functional")
```




# Second-order Spatial Point Patterns

## Analysing Spatial Point Process Using G-Function
In this section, the G function measures the distances between any two events and their respective nearest neighbours. Using spatstat package's Gest() and envelope() to run a Monte Carlo simulation test, which is used to predict the probability of a range of outcomes when the possibility of random variables is present.

::: panel-tabset

###Functional

#### Computing G-function estimation 
Lets start with the functional.

```{r}
G_func_osun = Gest(wp_osun_ppp_func, correction = "border")
plot(G_func_osun, xlim=c(0,500))
```




#### Performing Complete Spatial Randomness Test

Next, we will be conducting a hypothesis test to confirm the observed spatial patterns above. The hypothesis and test are as follows:

Ho = The distribution of non-functional water points in Osun, Nigeria are randomly distributed.

H1= The distribution of non-functional water points in Osun, Nigeria are NOT randomly distributed.

The null hypothesis will be rejected if p-value is smaller than alpha value of 0.05.

Monte Carlo test with G-function


```{r}
G_func_osun.csr <- envelope(wp_osun_ppp_func, Gest, nsim = 39)
```

```{r}
plot(G_func_osun.csr)
```



Conclusion
From func_osun.csr, it is observed that at 95% confidence interval, the G(r) far above the G(theo) and the envelope. This implies that the functional water points in Osun, Nigeria are clustered. Thus, we can reject the null hypothesis that the distribution of functional water points are randomly distributed.





### Non-Functional

#### Computing G-function estimation 
Next, Non-functional 

```{r}
G_nfunc_osun = Gest(wp_osun_ppp_nfunc, correction = "border")
plot(G_nfunc_osun, xlim=c(0,500))
```



#### Performing Complete Spatial Randomness Test

Next, we will be conducting a hypothesis test to confirm the observed spatial patterns above. The hypothesis and test are as follows:

Ho = The distribution of non-functional water points in Osun, Nigeria are randomly distributed.

H1= The distribution of non-functional water points in Osun, Nigeria are NOT randomly distributed.

The null hypothesis will be rejected if p-value is smaller than alpha value of 0.05.

Monte Carlo test with G-function


```{r}
G_nfunc_osun.csr <- envelope(wp_osun_ppp_nfunc, Gest, nsim = 39)
```

```{r}
plot(G_nfunc_osun.csr)
```


Conclusion
From nfunc_osun.csr, it is observed that at 95% confidence interval, the G(r) far above the G(theo) and the envelope. This implies that the non-functional water points in Osun, Nigeria are clustered. Thus, we can reject the null hypothesis that the distribution of non-functional water points are randomly distributed.


:::


# Analysing Spatial Point Process Using L-Function
Lets also investigate whether the spatial distribution of functional and non-functional water points are independent from each other.

::: panel-tabset

## Functional

### Computing G-function estimation 

```{r}
L_func_osun.csr = Lest(wp_osun_ppp_func, correction = "Ripley")
plot(L_func_osun.csr, . -r ~ r, 
     ylab= "L(d)-r", xlab = "d(m)")
```



### Performing Complete Spatial Randomness Test
Again, we will be conducting a hypothesis test to confirm the observed spatial patterns above. The hypothesis and test are as follows:

Ho = The distribution of functional water points in Osun, Nigeria are spatially independent. 

H1= The distribution of functional water points in Osun, Nigeria are NOT spatially independent.

The null hypothesis will be rejected if p-value is smaller than alpha value of 0.05.

Monte Carlo test with L-function


```{r}
L_func_osun.csr <- envelope(wp_osun_ppp_func, Lest, nsim = 39, rank = 1, glocal=TRUE)
```


### Plot the result from L-function

```{r}
plot(L_func_osun.csr, . - r ~ r, xlab="d", ylab="L(d)-r")
```


CONCLUSION
From the plot above, the empirical k-cross line is far outside from the envelope of the 95% confidence level, and for that scale, we reject the null hypothesis. Moreover, it is not even within the envelope in all distance(m). We can infer that the distribution of functional water points in Osun, Nigeria are NOT spatially independent.


## Non-Functional

- NOTE: erm I was unable to run the output in time for this section for submission..so i had to comment these codes out in order to render

### Computing G-function estimation 

```{r}
L_nfunc_osun.csr = Lest(wp_osun_ppp_nfunc, correction = "Ripley")
plot(L_nfunc_osun.csr, . -r ~ r, ylab= "L(d)-r", xlab = "d(m)")
```



### Performing Complete Spatial Randomness Test
Again, we will be conducting a hypothesis test to confirm the observed spatial patterns above. The hypothesis and test are as follows:

Ho = The distribution of non-functional water points in Osun, Nigeria are spatially independent. 

H1= The distribution of non-functional water points in Osun, Nigeria are spatially independent. 

The null hypothesis will be rejected if p-value is smaller than alpha value of 0.05.

Monte Carlo test with L-function

```{r}
#L_nfunc_osun.csr <- envelope(wp_osun_ppp_nfunc, Lest, nsim = 39, rank = 1, glocal=TRUE)
```



### Plot the result from L-function

```{r}
#plot(L_nfunc_osun.csr, . - r ~ r, xlab="d", ylab="L(d)-r")
```


CONCLUSION

:::






# Acknowledgement
Thank you Prof Kam for our IS415 Geospatial Analytics and Applications course materials & resources



