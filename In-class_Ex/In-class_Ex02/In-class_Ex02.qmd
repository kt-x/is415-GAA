---
title: "In-class Exercise 2: Geospatial Data Wrangling"
date: "`r Sys.Date()`"
format: html
execute: 
  message: true
  warning: false
editor: visual
---

Installing and check packages (sf, tidyverse, funModeling)

```{r}
pacman::p_load(sf, tidyverse, funModeling)
```

Importing the geoNGA data

```{r}
geoNGA = st_read(dsn = "data/geospatial/", 
               layer = "geoBoundaries-NGA-ADM2")%>%
  
#because the values were in decimals and hence need to transform
st_transform(crs = 26392)
```

Importing the NGA data

```{r}
NGA <- st_read(dsn = "data/geospatial/", 
               layer = "nga_admbnda_adm2_osgof_20190417")%>%
  
st_transform(crs = 26392)
```

```{r}
wp_nga <- read_csv("data/aspatial/WPdx.csv") %>%
  filter(`#clean_country_name` == "Nigeria")
```

##Converting water point into sf point features

```{r}
wp_nga$Geometry = st_as_sfc(wp_nga$`New Georeferenced Column`)
wp_nga
```

```{r}
wp_sf <- st_sf(wp_nga, crs=4326)
wp_sf
```

```{r}
wp_sf <- wp_sf %>%
  st_transform(crs = 26392)
```

##exclude redundant fields

```{r}
NGA <- NGA %>%
  select(c(3:4, 8:9))
```

##check for duplicates

```{r}
NGA$ADM2_EN[duplicated(NGA$ADM2_EN) == TRUE]
```

```{R}
NGA$ADM2_EN[94] <- "Bassa, Kogi"
NGA$ADM2_EN[95] <- "Bassa, Plateau"
NGA$ADM2_EN[304] <- "Ifelodun, Kwara"
NGA$ADM2_EN[305] <- "Ifelodun, Osun"
NGA$ADM2_EN[355] <- "Irepodun, Kwara"
NGA$ADM2_EN[356] <- "Irepodun, Osun"
NGA$ADM2_EN[519] <- "Nasarawa, Kano"
NGA$ADM2_EN[520] <- "Nasarawa, Nasarawa"
NGA$ADM2_EN[546] <- "Obi, Benue"
NGA$ADM2_EN[547] <- "Obi, Nasarawa"
NGA$ADM2_EN[693] <- "Surulere, Lagos"
NGA$ADM2_EN[694] <- "Surulere, Oyo"
```

#Data wrangling

```{r}
freq(data=wp_sf, 
     input='#status_clean')
```

```{r}
wp_sf_nga <- wp_sf %>%
  rename(status_clean = '#status_clean') %>%
  select(status_clean) %>%
  mutate(status_clean = replace_na (
    status_clean, "unknown"))
```

##extract data points

```{r}
wp_functional <- wp_sf_nga %>%
  filter(status_clean %in%
           c("Functional", 
             "Functional but not in use", 
             "Functional but needs repair"))
```

```{r}
wp_nonfunctional <- wp_sf_nga %>%
  filter(status_clean %in%
           c("Abandoned/Decommissioned",
             "Abandoned",
             "Non-Functional due to dry season",
             "Non-Functional"))
```

```{r}
wp_unkown <- wp_sf_nga %>%
  filter(status_clean == "unknown")
```

```{r}
NGA_wp <- NGA %>%
  mutate(`total_wp` = lengths(
    st_intersects(NGA, wp_sf_nga)
  )) %>% 
  mutate(`wp_functional` = lengths(
    st_intersects(NGA, wp_functional)
  )) %>%
  mutate(`wp_nonfunctional` = lengths(
    st_intersects(NGA, wp_nonfunctional)
  )) %>%
  mutate(`wp_unknown` = lengths(
    st_intersects(NGA, wp_unkown)
  ))
```

##save

```{r}
write_rds(NGA_wp, "data/rds/NGA_wp.rds")
```

##ggplot2

```{r}
ggplot(data = NGA_wp,
       aes(x = total_wp)) + 
  geom_histogram(bins=20,
                 color="black",
                 fill="light blue") +
  geom_vline(aes(xintercept=mean(
    total_wp, na.rm=T)),
             color="red", 
             linetype="dashed", 
             size=0.8) +
  ggtitle("Distribution of total water points by LGA") +
  xlab("No. of water points") +
  ylab("No. of\nLGAs") +
  theme(axis.title.y=element_text(angle = 0))

```
