---
title: "In-class_Ex11"
date: "27 Mar 2023"
date-modified: "`r Sys.Date()`"
number-sections: true
format: html
execute: 
  echo: true
  eval: true
  warning: false
editor: visual
---

## Import packages

```{r}
pacman::p_load(tmap, sf, sp, caret, stplanr, reshape2, broom, tidyverse)
```

## Import data

```{r}
odbus <- read_csv("data/aspatial/origin_destination_bus_202210.csv")
```

```{r}
odbus$ORIGIN_PT_CODE <- as.factor(odbus$ORIGIN_PT_CODE)

odbus$DESTINATION_PT_CODE <- as.factor(odbus$DESTINATION_PT_CODE)
```

```{r}
odbus7_9 <- odbus |> 
  filter(DAY_TYPE == "WEEKDAY") |>
  filter(TIME_PER_HOUR >= 7 & 
           TIME_PER_HOUR <= 9) |>
  group_by(ORIGIN_PT_CODE, DESTINATION_PT_CODE) |>
  summarise(TRIPS = sum(TOTAL_TRIPS))
```

### write to rds

```{r}
write_rds(odbus7_9, "data/rds/odbus7_9.rds")
```

## import geospatial

```{r}
busstop <- st_read(dsn = "data/geospatial", layer = "BusStop") |>
  st_transform(3414)
```

```{r}
mpsz <- st_read(dsn = "data/geospatial", layer = "MPSZ-2019") |>
  st_transform(3414)
```

### use intercept (overlay the bus stop on top of the polygon)

```{r}
busstop_mpsz <- st_intersection(busstop, mpsz) |>
  select(BUS_STOP_N, SUBZONE_C) |>
  st_drop_geometry()
```

## Append 

```{r}
od_data <- left_join(odbus7_9, busstop_mpsz, 
                     by = c("ORIGIN_PT_CODE" = "BUS_STOP_N")) |>
  rename(ORIGIN_BS = ORIGIN_PT_CODE, 
         ORIGIN_SZ = SUBZONE_C,
         DESTIN_BS = DESTINATION_PT_CODE)
```

### check for duplicates

help to identify errors

```{r}
duplicate <- od_data |>
  group_by_all() |>
  filter(n()>1) |>
  ungroup()
```

```{r}
od_data <-unique(od_data)
```

## destination bus stop by left_join

```{r}
od_data <- left_join(od_data, busstop_mpsz, 
                     by = c("DESTIN_BS" = "BUS_STOP_N"))
```

```{r}
duplicate2 <- od_data |> 
  group_by_all() |>
  filter(n()>1) |>
  ungroup()
```

```{r}
od_data <-unique(od_data)
```

```{r}
od_data <- od_data |>
  rename(DESTIN_SZ = SUBZONE_C) |>
  drop_na()
```

### write to rds

```{r}
write_rds(od_data, "data/rds/od_data.rds")
```

### read od_data 

```{r}
od_data <- read_rds("data/rds/od_data.rds")
```

## Prepare distance metric

```{r}
mpsz <- mpsz[order(mpsz$SUBZONE_C),]
head(mpsz, 10)
```

```{r}
mpsz_sp <- as(mpsz, "Spatial")
```

```{r}
dist <- spDists(mpsz_sp)
dist
```

```{r}
sz_names <- mpsz$SUBZONE_C
```

```{r}
colnames(dist) <- paste0(sz_names)
rownames(dist) <- paste0(sz_names)
```

### pivoting distance value by subzone c

```{r}
distPair <- melt(dist) |>
  rename(dist = value)
head(distPair, 10)
```

```{r}
distPair |> filter(dist > 0) |> summary()
```

```{r}
distPair$dist <- ifelse(distPair$dist == 0, 
                        50, distPair$dist)
```

```{r}
distPair <- distPair |>
  rename(orig = Var1,
         dest = Var2)
```

```{r}
flow_data <- od_data |>
  group_by(ORIGIN_SZ, DESTIN_SZ) |>
  summarise(TRIPS = sum(TRIPS))
```

### read pop data

```{r}
pop <-read_csv("data/aspatial/pop.csv")
```

```{r}
pop <- pop |>
  left_join(mpsz, 
       by = c("PA" = "PLN_AREA_N",
              "SZ" = "SUBZONE_N")) |>
  select(1:6) |>
  rename(SZ_NAME = SZ,
         SZ = SUBZONE_C)
```

```{r}
flow_data1 <- flow_data |>
  left_join(distPair,
            by = c("ORIGIN_SZ" = "orig",
                   "DESTIN_SZ" = "dest"))
```

Destination

```{r}
flow_data1 <- flow_data1 |>
  left_join(pop,
            by = c(DESTIN_SZ = "SZ")) |>
  rename(DESTIN_AGE7_12 = AGE7_12,
         DESTIN_AGE13_24 = AGE13_24)
```

Origin
```{r}
flow_data1 <- flow_data1 |>
  left_join(pop,
            by = c(ORIGIN_SZ = "SZ")) |>
  rename(ORIGIN_AGE7_12 = AGE7_12,
         ORIGIN_AGE13_24 = AGE13_24)
```





